{"version":3,"file":"index.js","sources":["../src/tokenizer/types.js","../src/util/scopeflags.js","../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../../babel-helper-validator-identifier/src/identifier.js","../../babel-helper-validator-identifier/src/keyword.js","../src/util/identifier.js","../src/plugins/flow.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/util/scope.js","../src/plugins/typescript/scope.js","../src/util/production-parameter.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/util/class-scope.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(prevType: TokenType) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  decimal: new TokenType(\"decimal\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: new TokenType(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: new TokenType(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: new TokenType(\"#{\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { beforeExpr, binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: new TokenType(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b00000000,\n             SCOPE_PROGRAM      = 0b00000001,\n             SCOPE_FUNCTION     = 0b00000010,\n             SCOPE_ARROW        = 0b00000100,\n             SCOPE_SIMPLE_CATCH = 0b00001000,\n             SCOPE_SUPER        = 0b00010000,\n             SCOPE_DIRECT_SUPER = 0b00100000,\n             SCOPE_CLASS        = 0b01000000,\n             SCOPE_TS_MODULE    = 0b10000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE           = 0b00000_0000_01,\n             BIND_KIND_TYPE            = 0b00000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR            = 0b00000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL        = 0b00000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION       = 0b00000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE        = 0b00000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE           = 0b00001_0000_00,\n             BIND_FLAGS_CLASS          = 0b00010_0000_00,\n             BIND_FLAGS_TS_ENUM        = 0b00100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  options: Options;\n  inModule: boolean;\n  scope: ScopeHandler<*>;\n  classScope: ClassScopeHandler;\n  prodParam: ProductionParameterHandler;\n  plugins: PluginsMap;\n  filename: ?string;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  input: string;\n  length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\n\nfunction last<T>(stack: $ReadOnlyArray<T>): T {\n  return stack[stack.length - 1];\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(\n    node: Node,\n    elements: (Node | null)[],\n    // When the current node is followed by a token which hasn't a respective AST node, we\n    // need to take all the trailing comments to prevent them from being attached to an\n    // unrelated node. e.g. in\n    //     var { x } /* cmt */ = { y }\n    // we don't want /* cmt */ to be attached to { y }.\n    // On the other hand, in\n    //     fn(x) [new line] /* cmt */ [new line] y\n    // /* cmt */ is both a trailing comment of fn(x) and a leading comment of y\n    takeAllComments?: boolean,\n  ) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (\n        this.state.leadingComments[j].end < this.state.commentPreviousNode.end\n      ) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        // Perf: we don't need to splice if we are going to reset the array anyway\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n        node.trailingComments.push(leadingComment);\n      }\n    }\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node: Node): void {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n\n    const stack = this.state.commentStack;\n\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      // If the first comment in trailingComments comes after the\n      // current node, then we're good - all comments in the array will\n      // come after the node and so it's safe to add them as official\n      // trailingComments.\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        // Otherwise, if the first comment doesn't come after the\n        // current node, that means we have a mix of leading and trailing\n        // comments in the array and that leadingComments contains the\n        // same items as trailingComments. Reset trailingComments to\n        // zero items and we'll handle this by evaluating leadingComments\n        // later.\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n      if (\n        lastInStack.trailingComments &&\n        lastInStack.trailingComments[0].start >= node.end\n      ) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    // Eating the stack.\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    // Adjust comments that follow a trailing comma on the last element in a\n    // comma separated list of nodes to be the trailing comments on the last\n    // element\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (\n      this.state.commentPreviousNode &&\n      ((this.state.commentPreviousNode.type === \"ImportSpecifier\" &&\n        node.type !== \"ImportSpecifier\") ||\n        (this.state.commentPreviousNode.type === \"ExportSpecifier\" &&\n          node.type !== \"ExportSpecifier\"))\n    ) {\n      this.adjustCommentsAfterTrailingComma(node, [\n        this.state.commentPreviousNode,\n      ]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (\n          lastChild !== node &&\n          lastChild.leadingComments.length > 0 &&\n          last(lastChild.leadingComments).end <= node.start\n        ) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n          // so this takes back the leading comment.\n          // See also: https://github.com/eslint/espree/issues/158\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (\n              this.state.leadingComments[j].end <\n              this.state.commentPreviousNode.end\n            ) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        // https://github.com/eslint/espree/issues/2\n        //\n        // In special cases, such as return (without a value) and\n        // debugger, all comments will end up as leadingComments and\n        // will otherwise be eliminated. This step runs when the\n        // commentStack is empty and there are comments left\n        // in leadingComments.\n        //\n        // This loop figures out the stopping point between the actual\n        // leading and trailing comments by finding the location of the\n        // first comment that comes after the given node.\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        // Split the array based on the location of the first comment\n        // that comes after the node. Keep in mind that this could\n        // result in an empty array, and if so, the array must be\n        // deleted.\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        // Similarly, trailing comments are attached later. The variable\n        // must be reset to null if there are no trailing comments.\n        trailingComments = this.state.leadingComments.slice(i);\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (\n        trailingComments.length &&\n        trailingComments[0].start >= node.start &&\n        last(trailingComments).end <= node.end\n      ) {\n        node.innerComments = trailingComments;\n      } else {\n        // TrailingComments maybe contain innerComments\n        const firstTrailingCommentIndex = trailingComments.findIndex(\n          comment => comment.end >= node.end,\n        );\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(\n            0,\n            firstTrailingCommentIndex,\n          );\n          node.trailingComments = trailingComments.slice(\n            firstTrailingCommentIndex,\n          );\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n}\n","// @flow\n/* eslint sort-keys: \"error\" */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsDisallowedInInitializer:\n    \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter:\n    \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction:\n    \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter:\n    \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport:\n    \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer:\n    \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys:\n    'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar:\n    \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline:\n    \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn:\n    \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed:\n    \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField:\n    \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper:\n    \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0\",\n});\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n};\n\nexport { ErrorMessages as Errors } from \"./error-message.js\";\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(pos: number, errorTemplate: string, ...params: any): Error | empty {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { Errors } from \"../parser/error\";\n\nfunction isSimpleProperty(node: N.Node): boolean {\n  return (\n    node != null &&\n    node.type === \"Property\" &&\n    node.kind === \"init\" &&\n    node.method === false\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    estreeParseRegExpLiteral({ pattern, flags }: N.RegExpLiteral): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    estreeParseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      // $FlowIgnore\n      const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n      const node = this.estreeParseLiteral(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral(value: any): N.Node {\n      return this.parseLiteral(value, \"Literal\");\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.value;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      const prop = ((method: any): N.EstreeProperty | N.EstreeMethodDefinition);\n      const paramCount = prop.kind === \"get\" ? 0 : 1;\n      const start = prop.start;\n      if (prop.value.params.length !== paramCount) {\n        if (method.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      } else if (\n        prop.kind === \"set\" &&\n        prop.value.params[0].type === \"RestElement\"\n      ) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n      disallowLetBinding?: boolean,\n    ): void {\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(prop => {\n            this.checkLVal(\n              prop.type === \"Property\" ? prop.value : prop,\n              bindingType,\n              checkClashes,\n              \"object destructuring pattern\",\n              disallowLetBinding,\n            );\n          });\n          break;\n        default:\n          super.checkLVal(\n            expr,\n            bindingType,\n            checkClashes,\n            contextDescription,\n            disallowLetBinding,\n          );\n      }\n    }\n\n    checkProto(\n      prop: N.ObjectMember | N.SpreadElement,\n      isRecord: boolean,\n      protoRef: { used: boolean },\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      // $FlowIgnore: check prop.method and fallback to super method\n      if (prop.method) {\n        return;\n      }\n      super.checkProto(prop, isRecord, protoRef, refExpressionErrors);\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const directive = super.stmtToDirective(stmt);\n      const value = stmt.expression.value;\n\n      // Reset value to the actual value as in estree mode we want\n      // the stmt to have the real value and not the raw value\n      directive.value.value = value;\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: ?boolean,\n      topLevel: boolean,\n      end: TokenType,\n    ): void {\n      super.parseBlockBody(node, allowDirectives, topLevel, end);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      switch (this.state.type) {\n        case tt.num:\n        case tt.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case tt.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case tt.bigint:\n          return this.estreeParseBigIntLiteral(this.state.value);\n\n        case tt.decimal:\n          return this.estreeParseDecimalLiteral(this.state.value);\n\n        case tt._null:\n          return this.estreeParseLiteral(null);\n\n        case tt._true:\n          return this.estreeParseLiteral(true);\n\n        case tt._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    parseLiteral<T: N.Literal>(\n      value: any,\n      type: /*T[\"kind\"]*/ string,\n      startPos?: number,\n      startLoc?: Position,\n    ): T {\n      const node = super.parseLiteral(value, type, startPos, startLoc);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n\n      type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n      return this.finishNode(node, type);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (isSimpleProperty(node)) {\n        this.toAssignable(node.value);\n\n        return node;\n      }\n\n      return super.toAssignable(node);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, isLast: boolean) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        throw this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        throw this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedListDeep(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): void {\n      // ImportExpressions do not have an arguments array.\n      if (!exprList) {\n        return;\n      }\n\n      super.toReferencedListDeep(exprList, isParenthesizedExpr);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n  };\n","// @flow\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport { types as tt } from \"./types\";\n\nexport class TokContext {\n  constructor(\n    token: string,\n    isExpr?: boolean,\n    preserveSpace?: boolean,\n    override?: ?Function, // Takes a Tokenizer as a this-parameter, and returns void.\n  ) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n  token: string;\n  isExpr: boolean;\n  preserveSpace: boolean;\n  override: ?Function;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false),\n};\n\n// Token-specific context update code\n\ntt.parenR.updateContext = tt.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntt.name.updateContext = function (prevType) {\n  let allowed = false;\n  if (prevType !== tt.dot) {\n    if (\n      (this.state.value === \"of\" &&\n        !this.state.exprAllowed &&\n        prevType !== tt._function &&\n        prevType !== tt._class) ||\n      (this.state.value === \"yield\" && this.prodParam.hasYield)\n    ) {\n      allowed = true;\n    }\n  }\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntt.braceL.updateContext = function (prevType) {\n  this.state.context.push(\n    this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.dollarBraceL.updateContext = function () {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntt.parenL.updateContext = function (prevType) {\n  const statementParens =\n    prevType === tt._if ||\n    prevType === tt._for ||\n    prevType === tt._with ||\n    prevType === tt._while;\n  this.state.context.push(\n    statementParens ? types.parenStatement : types.parenExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\ntt._function.updateContext = tt._class.updateContext = function (prevType) {\n  if (\n    prevType.beforeExpr &&\n    prevType !== tt.semi &&\n    prevType !== tt._else &&\n    !(prevType === tt._return && this.hasPrecedingLineBreak()) &&\n    !(\n      (prevType === tt.colon || prevType === tt.braceL) &&\n      this.curContext() === types.b_stat\n    )\n  ) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntt.backQuote.updateContext = function () {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n  this.state.exprAllowed = false;\n};\n\n// we don't need to update context for tt.braceBarL because we do not pop context for tt.braceBarR\ntt.braceHashL.updateContext = function () {\n  this.state.context.push(types.recordExpression);\n  this.state.exprAllowed = true; /* tt.braceHashL.beforeExpr */\n};\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: $ReadOnlyArray<number>): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (const char of Array.from(name)) {\n    const cp = char.codePointAt(0);\n    if (isFirst) {\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n      isFirst = false;\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","// @flow\n\nconst reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../parser\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport type { Options } from \"../options\";\nimport type { Pos, Position } from \"../util/location\";\nimport type State from \"../tokenizer/state\";\nimport { types as tc } from \"../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../util/identifier\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport { Errors } from \"../parser/error\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized:\n    \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName:\n    \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues:\n    \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType:\n    \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied:\n    \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType:\n    \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType:\n    \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType:\n    \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName:\n    \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized:\n    \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized:\n    \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind:\n    \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: State): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\";\n\n    constructor(options: ?Options, input: string) {\n      super(options, input);\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(tt.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (\n        moduloLoc.line !== checksLoc.line ||\n        moduloLoc.column !== checksLoc.column - 1\n      ) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        name = this.parseIdentifier();\n        if (this.eat(tt.question)) {\n          optional = true;\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(\n      params: N.FlowFunctionTypeParam[] = [],\n    ): { params: N.FlowFunctionTypeParam[], rest: ?N.FlowFunctionTypeParam } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n      return { params, rest };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start,\n        startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      while (this.match(tt.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(tt.bracketL);\n        this.expect(tt.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      // Ensure that a brace after a function generic type annotation is a\n      // statement, except in arrow functions (noAnonFunctionType)\n      this.state.exprAllowed =\n        this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      } else {\n        const stmt = super.parseStatement(context, topLevel);\n        // We will parse a flow pragma in any comment before the first statement.\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n        return stmt;\n      }\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      // only use the expensive \"tryParse\" method if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() =>\n          super.parseConditional(expr, startPos, startLoc),\n        );\n\n        if (!result.node) {\n          // $FlowIgnore\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: { hadConstructor: boolean },\n      constructorAllowsSuper: boolean,\n    ): void {\n      const pos = this.state.start;\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\"\n        ) {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(\n            member.value.start,\n            FlowErrors.DeclareClassFieldInitializer,\n          );\n        }\n      }\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\": {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type === \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          });\n        }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node));\n      } else {\n        return super.toAssignable(node);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(\n          expr,\n          bindingType,\n          checkClashes,\n          contextDescription,\n        );\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        contextDescription,\n      );\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseIdentifier(true);\n\n      let specifierTypeKind = null;\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (\n        specifierTypeKind !== null &&\n        (this.match(tt.name) || this.state.type.keyword)\n      ) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          firstIdentLoc,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        \"import specifier\",\n      );\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () =>\n            super.parseMaybeAssign(\n              refExpressionErrors,\n              afterLeftParse,\n              refNeedsArrowPos,\n            ),\n          state,\n        );\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === tc.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (jsx?.error || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n                refNeedsArrowPos,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {}: any);\n          if (\n            arrowExpression.type !== \"ArrowFunctionExpression\" &&\n            arrowExpression.extra?.parenthesized\n          ) {\n            abort();\n          }\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                typeParameters.start,\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      );\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral();\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      booleanMembers: Array<N.Node>,\n      numberMembers: Array<N.Node>,\n      stringMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      while (!this.match(tt.braceR)) {\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return members;\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const members = this.flowEnumMembers({ enumName, explicitType });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (\n        this.match(tt.name) &&\n        this.state.value === \"of\" &&\n        prevType === tt.name &&\n        this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) ===\n          \"interface\"\n      ) {\n        this.state.exprAllowed = false;\n      } else {\n        super.updateContext(prevType);\n      }\n    }\n\n    // check if the next token is a tt.relation(\"<\")\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\", false);\ntc.j_cTag = new TokContext(\"</tag\", false);\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = function () {\n  this.state.context.push(tc.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(tc.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntt.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n  if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === tc.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        node.expression = this.parseExpression();\n      }\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (this.match(tt.braceL)) {\n        const curContext = this.curContext();\n        if (curContext === tc.j_oTag) {\n          this.state.context.push(tc.braceExpression);\n        } else if (curContext === tc.j_expr) {\n          this.state.context.push(tc.templateQuasi);\n        } else {\n          super.updateContext(prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(tt.slash) && prevType === tt.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(tc.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlags;\n  // A list of var-declared names in the current lexical scope\n  var: string[] = [];\n  // A list of lexically-declared names in the current lexical scope\n  lexical: string[] = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: string[] = [];\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  raise: raiseFunction;\n  inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        scope.functions.indexOf(name) > -1 ||\n        scope.var.indexOf(name) > -1\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        (!this.treatFunctionsAsVarInScope(scope) &&\n          scope.var.indexOf(name) > -1)\n      );\n    }\n\n    return (\n      (scope.lexical.indexOf(name) > -1 &&\n        !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name)) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        scope.functions.indexOf(name) > -1)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1 &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      this.scopeStack[0].functions.indexOf(id.name) === -1\n    ) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (\n        (scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) &&\n        !(scope.flags & SCOPE_ARROW)\n      ) {\n        return scope;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: string[] = [];\n\n  // enums (which are also in .types)\n  enums: string[] = [];\n\n  // const enums (which are also in .enums and .types)\n  constEnums: string[] = [];\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: string[] = [];\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: string[] = [];\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.push(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].types.indexOf(id.name) === -1 &&\n      this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = typeof PARAM | typeof PARAM_AWAIT | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors } from \"../../parser/error\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"public\"\n  | \"private\"\n  | \"protected\";\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer:\n    \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility:\n    \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility:\n    \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution:\n    \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind:\n    \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\",\n});\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return (\n        !this.hasPrecedingLineBreak() &&\n        !this.match(tt.parenL) &&\n        !this.match(tt.parenR) &&\n        !this.match(tt.colon) &&\n        !this.match(tt.eq) &&\n        !this.match(tt.question) &&\n        !this.match(tt.bang)\n      );\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers<T: TsModifier>(\n      modified: { [key: TsModifier]: ?true },\n      allowedModifiers: T[],\n    ): void {\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?T = this.tsParseModifier(allowedModifiers);\n\n        if (!modifier) break;\n\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        }\n        modified[modifier] = true;\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma)) {\n        this.semicolon();\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (!readonly && (this.match(tt.parenL) || this.isRelational(\"<\"))) {\n        const method: N.TsMethodSignature = nodeAny;\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      const readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        if (readonly) node.readonly = true;\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      return this.tsParsePropertyOrMethodSignature(node, readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(\n            elementNode.start,\n            TSErrors.MixedLabeledAndUnlabeledElements,\n          );\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        this.expect(tt._new);\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      const templateNode = this.parseTemplate(false);\n      if (templateNode.expressions.length > 0) {\n        this.raise(\n          templateNode.expressions[0].start,\n          TSErrors.TemplateTypeHasSubstitution,\n        );\n      }\n      node.literal = templateNode;\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.parseIdentifierName(typeParameter.start);\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      this.eat(operator);\n      let type = parseConstituentType();\n      if (this.match(operator)) {\n        const types = [type];\n        while (this.eat(operator)) {\n          types.push(parseConstituentType());\n        }\n        const node: N.TsUnionType | N.TsIntersectionType = this.startNodeAtNode(\n          type,\n        );\n        node.types = types;\n        type = this.finishNode(node, kind);\n      }\n      return type;\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const asserts = this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            const node: N.TsTypePredicate = this.startNodeAtNode(t);\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          const node: N.TsTypePredicate = this.startNodeAtNode(t);\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        const node = this.startNodeAtNode(t);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (\n        !this.match(tt.name) ||\n        this.state.value !== \"asserts\" ||\n        this.hasPrecedingLineBreak()\n      ) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_TS_INTERFACE,\n        undefined,\n        \"typescript interface declaration\",\n      );\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsExpectThenParseType(tt.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n        undefined,\n        \"typescript enum declaration\",\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          BIND_TS_NAMESPACE,\n          null,\n          \"module or namespace declaration\",\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_LEXICAL,\n        undefined,\n        \"import equals declaration\",\n      );\n      this.expect(tt.eq);\n      node.moduleReference = this.tsParseModuleReference();\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case tt._function:\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        case tt._class:\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to now how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        case tt._const:\n          if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n          }\n        // falls through\n        case tt._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n        case tt.name: {\n          const value = this.state.value;\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, /* next */ true);\n          }\n        }\n      }\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      switch (value) {\n        case \"abstract\":\n          if (this.tsCheckLineTerminatorAndMatch(tt._class, next)) {\n            const cls: N.ClassDeclaration = node;\n            cls.abstract = true;\n            if (next) {\n              this.next();\n              if (!this.match(tt._class)) {\n                this.unexpected(null, tt._class);\n              }\n            }\n            return this.parseClass(\n              cls,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (next) this.next();\n          if (this.match(tt.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminatorAndMatch(tokenType: TokenType, next: boolean) {\n      return (next || this.match(tokenType)) && !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      // This reads the next token after the `>` too, so do this in the enclosing context.\n      // But be sure not to parse a regex in the jsx expression `<C<number> />`, so set exprAllowed = false\n      this.state.exprAllowed = false;\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      if (allowModifiers) {\n        accessibility = this.parseAccessModifier();\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n              node.typeParameters = typeArguments;\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      if (this.match(tt.name) || this.match(tt.star) || this.match(tt.braceL)) {\n        const ahead = this.lookahead();\n\n        if (this.match(tt.name) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n\n        if (\n          this.isContextual(\"type\") &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          !(ahead.type === tt.name && ahead.value === \"from\")\n        ) {\n          node.importKind = \"type\";\n          this.next();\n        } else {\n          node.importKind = \"value\";\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(\n          importNode.start,\n          \"A type-only import can specify a default import or named bindings, but not both.\",\n        );\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.expect(tt._import);\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (this.isContextual(\"type\") && this.lookahead().type === tt.braceL) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        this.parseClass(cls, true, true);\n        cls.abstract = true;\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const result = this.tsParseDeclaration(\n          this.startNode(),\n          this.state.value,\n          true,\n        );\n\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: { hadConstructor: boolean },\n      constructorAllowsSuper: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"declare\"]);\n      const accessibility = this.parseAccessModifier();\n      if (accessibility) member.accessibility = accessibility;\n      this.tsParseModifiers(member, [\"declare\"]);\n\n      super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: { hadConstructor: boolean },\n      isStatic: boolean,\n      constructorAllowsSuper: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if (isStatic) {\n          this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n\n        return;\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member,\n        state,\n        isStatic,\n        constructorAllowsSuper,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!refNeedsArrowPos || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refNeedsArrowPos,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        // $FlowIgnore\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (node.declare && this.match(tt.equal)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (this.match(tt.jsxTagStart)) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!jsx?.error && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          (expr.extra && expr.extra.parenthesized)\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node));\n        case \"TSParameterProperty\":\n          return super.toAssignable(node);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression);\n          return node;\n        default:\n          return super.toAssignable(node);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(\n            expr.parameter,\n            bindingType,\n            checkClashes,\n            \"parameter property\",\n          );\n          return;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          this.checkLVal(\n            expr.expression,\n            bindingType,\n            checkClashes,\n            contextDescription,\n          );\n          return;\n        default:\n          super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      if (this.match(tt.relational)) {\n        const code = this.input.charCodeAt(this.state.start);\n        if (code === charCodes.lessThan || code === charCodes.greaterThan) {\n          this.state.pos -= 1;\n          this.readToken_lt_gt(code);\n        }\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    shouldParseArrow() {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const firstParam = method.params[0];\n      const hasContextParam =\n        firstParam &&\n        firstParam.type === \"Identifier\" &&\n        firstParam.name === \"this\";\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, \"A class name is required\");\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tt.placeholder.label,\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { types as tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (\n    hasPlugin(plugins, \"pipelineOperator\") &&\n    !PIPELINE_PROPOSALS.includes(\n      getPluginOption(plugins, \"pipelineOperator\", \"proposal\"),\n    )\n  ) {\n    throw new Error(\n      \"'pipelineOperator' requires 'proposal' option whose value should be one of: \" +\n        PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    const moduleAttributesVerionPluginOption = getPluginOption(\n      plugins,\n      \"moduleAttributes\",\n      \"version\",\n    );\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\n        \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n          \" representing the last proposal update. Currently, the\" +\n          \" only supported value is 'may-2020'.\",\n      );\n    }\n  }\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> = Object.keys(\n  mixinPlugins,\n);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { types as tt, type TokenType } from \"./types\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: SyntaxError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  inParameters: boolean = false;\n  maybeInArrowParameters: boolean = false;\n  // This flag is used to track async arrow head across function declarations.\n  // e.g. async (foo = function (await) {}) => {}\n  // When parsing `await` in this expression, `maybeInAsyncArrowHead` is true\n  // but `maybeInArrowParameters` is false\n  maybeInAsyncArrowHead: boolean = false;\n  inPipeline: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isIterator: boolean = false;\n\n  // For the smartPipelines plugin:\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F# plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  yieldPos: number = -1;\n  awaitPos: number = -1;\n\n  // Comment store.\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  trailingComments: Array<N.Comment> = [];\n  leadingComments: Array<N.Comment> = [];\n  commentStack: Array<{\n    start: number,\n    leadingComments: ?Array<N.Comment>,\n    trailingComments: ?Array<N.Comment>,\n    type: string,\n  }> = [];\n  // $FlowIgnore this is initialized when the parser starts.\n  commentPreviousNode: N.Node = null;\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  context: Array<TokContext> = [ct.braceStatement];\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to throw an error for\n  // an octal literal in a directive that occurs prior\n  // to a \"use strict\" directive.\n  octalPositions: number[] = [];\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  exportedIdentifiers: Array<string> = [];\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport ParserErrors, { Errors } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreak,\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  type: TokenType;\n  value: any;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (pos?: ?number, messageOrType?: string | TokenType) => empty;\n  +expectPlugin: (name: string, pos?: ?number) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  // TODO\n\n  lookahead(): State {\n    const old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    // $FlowIgnore: The skipWhiteSpace ensures to match any string\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (!this.match(tt.num) && !this.match(tt.string)) return;\n    this.state.pos = this.state.start;\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart =\n        this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n    this.nextToken();\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext?.preserveSpace) this.skipSpace();\n\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    const override = curContext?.override;\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(\n    block: boolean,\n    text: string,\n    start: number,\n    end: number,\n    startLoc: Position,\n    endLoc: Position,\n  ): void {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc),\n    };\n\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment(): void {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n    while (\n      (match = lineBreakG.exec(this.input)) &&\n      match.index < this.state.pos\n    ) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      true,\n      this.input.slice(start + 2, end),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  skipLineComment(startSkip: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      false,\n      this.input.slice(start + startSkip, this.state.pos),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk:\n              this.skipBlockComment();\n              break;\n\n            case charCodes.slash:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          this.state.pos,\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n        );\n      }\n\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n      this.state.pos += 2;\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    // '/'\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !exprAllowed) {\n      width++;\n      type = tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n\n        this.finishOp(tt.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (\n        next === charCodes.dash &&\n        !this.inModule &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan &&\n        (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())\n      ) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (\n      next === charCodes.exclamationMark &&\n      code === charCodes.lessThan &&\n      !this.inModule &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dash &&\n      this.input.charCodeAt(this.state.pos + 3) === charCodes.dash\n    ) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // [|\n          this.finishToken(tt.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // {|\n          this.finishToken(tt.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.pos;\n    let escaped, inClass;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (\n        isIdentifierChar(charCode) ||\n        charCode === charCodes.backslash\n      ) {\n        this.raise(this.state.pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(start, Errors.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      if (this.state.strict) {\n        this.raise(start, Errors.StrictOctalLiteral);\n      } else {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) this.raise(start, Errors.InvalidNumber);\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, Errors.InvalidBigIntLiteral);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, Errors.InvalidDecimal);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else if (this.state.strict) {\n          this.raise(this.state.pos - 1, Errors.StrictNumericEscape);\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, Errors.StrictNumericEscape);\n            } else {\n              // This property is used to throw an error for\n              // an octal literal in a directive that occurs prior\n              // to a \"use strict\" directive.\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  readWord1(): string {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === charCodes.atSign) {\n        ++this.state.pos;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word: string): boolean {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(): void {\n    const word = this.readWord1();\n    const type = keywordTypes.get(word) || tt.name;\n\n    // Allow @@iterator and @@asyncIterator as a identifier only inside type\n    if (\n      this.state.isIterator &&\n      (!this.isIterator(word) || !this.state.inType)\n    ) {\n      this.raise(this.state.pos, Errors.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const kw = this.state.type.keyword;\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType: TokenType): boolean {\n    const parent = this.curContext();\n    if (parent === ct.functionExpression || parent === ct.functionStatement) {\n      return true;\n    }\n    if (\n      prevType === tt.colon &&\n      (parent === ct.braceStatement || parent === ct.braceExpression)\n    ) {\n      return !parent.isExpr;\n    }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (\n      prevType === tt._return ||\n      (prevType === tt.name && this.state.exprAllowed)\n    ) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (\n      prevType === tt._else ||\n      prevType === tt.semi ||\n      prevType === tt.eof ||\n      prevType === tt.parenR ||\n      prevType === tt.arrow\n    ) {\n      return true;\n    }\n\n    if (prevType === tt.braceL) {\n      return parent === ct.braceStatement;\n    }\n\n    if (\n      prevType === tt._var ||\n      prevType === tt._const ||\n      prevType === tt.name\n    ) {\n      return false;\n    }\n\n    if (prevType === tt.relational) {\n      // `class C<T> { ... }`\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType: TokenType): void {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === tt.dot || prevType === tt.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if ((update = type.updateContext)) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport { Errors } from \"./error\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    return (\n      this.input.slice(nameStart, nameEnd) === name &&\n      (nameEnd === this.input.length ||\n        !isIdentifierChar(this.input.charCodeAt(nameEnd)))\n    );\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, message?: string): void {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(): void {\n    if (!this.isLineTerminator()) this.unexpected(null, tt.semi);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(this.state.lastTokEnd, message);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: string | TokenType = \"Unexpected token\",\n  ): empty {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (\n      this.state.yieldPos !== -1 &&\n      (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)\n    ) {\n      this.raise(this.state.yieldPos, Errors.YieldBindingIdentifier);\n    }\n    if (this.state.awaitPos !== -1) {\n      this.raise(this.state.awaitPos, Errors.AwaitBindingIdentifier);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, SyntaxError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: SyntaxError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return (\n      this.match(tt.name) ||\n      !!this.state.type.keyword ||\n      this.match(tt.string) ||\n      this.match(tt.num) ||\n      this.match(tt.bigint) ||\n      this.match(tt.decimal)\n    );\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track\n * - **shorthandAssign**: track initializer `=` position when parsing ambiguous\n *   patterns. When we are sure the parsed pattern is a RHS, which means it is\n *   not a pattern, we will throw on this position on invalid assign syntax,\n *   otherwise it will be reset to -1\n * - **doubleProto**: track the duplicate `__proto__` key position when parsing\n *   ambiguous object patterns. When we are sure the parsed pattern is a RHS,\n *   which means it is an object literal, we will throw on this position for\n *   __proto__ redefinition, otherwise it will be reset to -1\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n  range: [number, number];\n  leadingComments: Array<Comment>;\n  trailingComments: Array<Comment>;\n  innerComments: Array<Comment>;\n  extra: { [key: string]: any };\n\n  __clone(): this {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // $FlowIgnore\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node) => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n  // NOTE: There is a corresponding \"isAssignable\" method in flow.js.\n  // When this one is updated, please check if also that one needs to be updated.\n\n  toAssignable(node: Node): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (\n        parenthesized.type !== \"Identifier\" &&\n        parenthesized.type !== \"MemberExpression\"\n      ) {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(((parenthesized: any): Expression));\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop: Node, isLast: boolean) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(prop.key.start, error);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  checkLVal(\n    expr: Expression,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?{ [key: string]: boolean },\n    contextDescription: string,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(expr.name, this.inModule)\n            : isStrictBindOnlyReservedWord(expr.name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            expr.name,\n          );\n        }\n\n        if (checkClashes) {\n          // we need to prefix this with an underscore for the cases where we have a key of\n          // `__proto__`. there's a bug in old V8 where the following wouldn't work:\n          //\n          //   > var obj = Object.create(null);\n          //   undefined\n          //   > obj.__proto__\n          //   null\n          //   > obj.__proto__ = true;\n          //   true\n          //   > obj.__proto__\n          //   null\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (prop.type === \"ObjectProperty\") prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (prop.type === \"ObjectMethod\") continue;\n\n          this.checkLVal(\n            prop,\n            bindingType,\n            checkClashes,\n            \"object destructuring pattern\",\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              bindingType,\n              checkClashes,\n              \"array destructuring pattern\",\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          bindingType,\n          checkClashes,\n          \"assignment pattern\",\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          bindingType,\n          checkClashes,\n          \"rest element\",\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          bindingType,\n          checkClashes,\n          \"parenthesized expression\",\n        );\n        break;\n\n      default: {\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport { types as ct } from \"../tokenizer/context\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n} from \"../util/identifier\";\nimport type { Pos, Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  PARAM,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport { Errors } from \"./error\";\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      prop.type === \"ObjectMethod\" ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, Errors.RecordNoProto);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      ),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      ),\n    );\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      } else {\n        // The tokenizer will assume an expression is allowed after\n        // `yield`, but this isn't that kind of yield\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(\n      refExpressionErrors,\n      refNeedsArrowPos,\n    );\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    refExpressionErrors: ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // FIXME: Disabling this for now since can't seem to get it to play nicely\n    // eslint-disable-next-line no-unused-vars\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    let prec = this.state.type.binop;\n    if (prec != null && (this.prodParam.hasIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        if (\n          op === tt.exponent &&\n          left.type === \"UnaryExpression\" &&\n          (this.options.createParenthesizedExpressions ||\n            !(left.extra && left.extra.parenthesized))\n        ) {\n          this.raise(\n            left.argument.start,\n            Errors.UnexpectedTokenUnaryExponentiation,\n          );\n        }\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = ((tt.logicalAND: any): { binop: number }).binop;\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n      // falls through\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n    );\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary();\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (\n          (arg.type === \"MemberExpression\" ||\n            arg.type === \"OptionalMemberExpression\") &&\n          arg.property.type === \"PrivateName\"\n        ) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    return this.parseUpdate(node, update, refExpressionErrors);\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n      if (state.maybeAsyncArrow) {\n        this.state.maybeInAsyncArrowHead = true;\n      }\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n      this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n    if (this.match(tt.questionDot)) {\n      state.optionalChainMember = optional = true;\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else if (optional || this.match(tt.bracketL) || this.eat(tt.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(tt.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed\n      ? this.parseExpression()\n      : this.parseMaybePrivateName(true);\n\n    if (property.type === \"PrivateName\") {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, Errors.SuperPrivateField);\n      }\n      this.classScope.usePrivateName(property.id.name, property.start);\n    }\n    node.property = property;\n\n    if (computed) {\n      this.expect(tt.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        state.maybeAsyncArrow,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n      );\n    }\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n    } else {\n      this.toReferencedListDeep(node.arguments);\n\n      // We keep the old value if it isn't null, for cases like\n      //   (x = async(yield)) => {}\n      //\n      // Hi developer of the future :) If you are implementing generator\n      // arrow functions, please read the note below about \"await\" and\n      // verify if the same logic is needed for yield.\n      if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n      // Await is trickier than yield. When parsing a possible arrow function\n      // (e.g. something starting with `async(`) we don't know if its possible\n      // parameters will actually be inside an async arrow function or if it is\n      // a normal call expression.\n      // If it ended up being a call expression, if we are in a context where\n      // await expression are disallowed (and thus \"await\" is an identifier)\n      // we must be careful not to leak this.state.awaitPos to an even outer\n      // context, where \"await\" could not be an identifier.\n      // For example, this code is valid because \"await\" isn't directly inside\n      // an async function:\n      //\n      //     async function a() {\n      //       function b(param = async (await)) {\n      //       }\n      //     }\n      //\n      if (\n        (!this.isAwaitAllowed() && !oldMaybeInArrowParameters) ||\n        oldAwaitPos !== -1\n      ) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        this.expectPlugin(\"moduleAttributes\");\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          node.start,\n          Errors.ImportCallArity,\n          this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, Errors.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    possibleAsyncArrow: boolean,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      // we need to make sure that if this is an async arrow functions,\n      // that we don't allow inner parens inside the params\n      if (this.match(tt.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          false,\n          possibleAsyncArrow ? new ExpressionErrors() : undefined,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    // we found an async arrow function so let's not allow any inner parens\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.state.type === tt.slash) this.readRegexp();\n\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n          if (this.match(tt._function)) {\n            const last = this.state.context.length - 1;\n            if (this.state.context[last] !== ct.functionStatement) {\n              // Since \"async\" is an identifier and normally identifiers\n              // can't be followed by expression, the tokenizer assumes\n              // that \"function\" starts a statement.\n              // Fixing it in the tokenizer would mean tracking not only the\n              // previous token (\"async\"), but also the one before to know\n              // its beforeExpr value.\n              // It's easier and more efficient to adjust the context here.\n              throw new Error(\"Internal error\");\n            }\n            this.state.context[last] = ct.functionExpression;\n\n            this.next();\n            return this.parseFunction(\n              this.startNodeAtNode(id),\n              undefined,\n              true,\n            );\n          } else if (this.match(tt.name)) {\n            return this.parseAsyncArrowUnaryFunction(id);\n          }\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          return this.parseArrowExpression(\n            this.startNodeAtNode(id),\n            [id],\n            false,\n          );\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        return this.parseDo();\n      }\n\n      case tt.regexp: {\n        const value = this.state.value;\n        node = this.parseLiteral(value.value, \"RegExpLiteral\");\n        node.pattern = value.pattern;\n        node.flags = value.flags;\n        return node;\n      }\n\n      case tt.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case tt.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case tt.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case tt.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case tt._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case tt._true:\n      case tt._false:\n        return this.parseBooleanLiteral();\n\n      case tt.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.hash: {\n        if (this.state.inPipeline) {\n          node = this.startNode();\n\n          if (\n            this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\"\n          ) {\n            this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n          }\n\n          this.next();\n\n          if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n            this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n          }\n\n          this.registerTopicReference();\n          return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n        }\n\n        // https://tc39.es/proposal-private-fields-in-in\n        // RelationalExpression [In, Yield, Await]\n        //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n        const nextCh = this.input.codePointAt(this.state.end);\n        if (isIdentifierStart(nextCh) || nextCh === charCodes.backslash) {\n          const start = this.state.start;\n          // $FlowIgnore It'll either parse a PrivateName or throw.\n          node = (this.parseMaybePrivateName(true): N.PrivateName);\n          if (this.match(tt._in)) {\n            this.expectPlugin(\"privateIn\");\n            this.classScope.usePrivateName(node.id.name, node.start);\n          } else if (this.hasPlugin(\"privateIn\")) {\n            this.raise(\n              this.state.start,\n              Errors.PrivateInExpectedIn,\n              node.id.name,\n            );\n          } else {\n            throw this.unexpected(start);\n          }\n          return node;\n        }\n      }\n      // fall through\n      case tt.relational: {\n        if (this.state.value === \"<\") {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (\n            isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n            lookaheadCh === charCodes.greaterThan // Fragment <>\n          ) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          }\n        }\n      }\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(id: N.Expression): N.ArrowFunctionExpression {\n    const node = this.startNodeAtNode(id);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.maybeInAsyncArrowHead = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    const params = [this.parseIdentifier()];\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, Errors.LineTerminatorBeforeArrow);\n    }\n    this.expect(tt.arrow);\n    this.checkYieldAwaitInDefaultParams();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  parseDo(): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    const node = this.startNode();\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    node.body = this.parseBlock();\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.SuperNotAllowed);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.UnexpectedSuper);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(node.start, Errors.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral(): N.BooleanLiteral {\n    const node = this.startNode();\n    node.value = this.match(tt._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, Errors.UnexpectedPrivateField);\n      }\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(\n          id.start,\n          { code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\" },\n          Errors.ImportMetaOutsideModule,\n        );\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral<T: N.Literal>(\n    value: any,\n    type: /*T[\"kind\"]*/ string,\n    startPos?: number,\n    startLoc?: Position,\n  ): T {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = { start: 0 };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma, refNeedsArrowPos.start || null);\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n            refNeedsArrowPos,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow() &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      if (!this.isAwaitAllowed() && !this.state.maybeInAsyncArrowHead) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      for (const param of exprList) {\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    // We keep the old value if it isn't null, for cases like\n    //   (x = (yield)) => {}\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = Errors.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(metaProp.start, error);\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (\n      node.callee.type === \"OptionalMemberExpression\" ||\n      node.callee.type === \"OptionalCallExpression\"\n    ) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        prop.type !== \"ObjectProperty\" &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(prop.start, Errors.InvalidRecordProperty);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (\n      !isPattern &&\n      !isGenerator &&\n      !containsEsc &&\n      this.maybeAsyncOrAccessorProp(prop)\n    ) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          this.raise(this.state.pos, Errors.AccessorIsGenerator, keyName);\n          this.next();\n        }\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      method.params[method.params.length - 1].type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        /* isGenerator */ false,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoveredInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else {\n        prop.value = prop.key.__clone();\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      (prop: $FlowFixMe).key =\n        this.match(tt.num) ||\n        this.match(tt.string) ||\n        this.match(tt.bigint) ||\n        this.match(tt.decimal)\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      this.toReferencedList(node.elements);\n    }\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody and AsyncConciseBody inherit [In]\n    if (!this.match(tt.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssignAllowIn();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              BIND_OUTSIDE,\n              undefined,\n              \"function name\",\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    // $FlowIssue\n    const nameHash: {} = Object.create(null);\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(\n        node.params[i],\n        BIND_VAR,\n        allowDuplicates ? null : nameHash,\n        \"function parameter list\",\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    refNeedsArrowPos: ?Pos,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, Errors.UnexpectedToken, \",\");\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors, refNeedsArrowPos),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n        refNeedsArrowPos,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { start, type } = this.state;\n\n    if (type === tt.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n\n      // `class` and `function` keywords push function-type token context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed\n      // as an identifier such as a property name.\n      const curContext = this.curContext();\n      if (\n        (type === tt._class || type === tt._function) &&\n        (curContext === ct.functionStatement ||\n          curContext === ct.functionExpression)\n      ) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, Errors.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      }\n      if (\n        this.state.awaitPos === -1 &&\n        (this.state.maybeInAsyncArrowHead || this.isAwaitAllowed())\n      ) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (\n      this.scope.inClass &&\n      !this.scope.inNonArrowFunction &&\n      word === \"arguments\"\n    ) {\n      this.raise(startLoc, Errors.ArgumentsDisallowedInInitializer);\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, Errors.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(): N.AwaitExpression {\n    const node = this.startNode();\n\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (\n        this.hasPrecedingLineBreak() ||\n        // All the following expressions are ambiguous:\n        //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n        this.match(tt.plusMin) ||\n        this.match(tt.parenL) ||\n        this.match(tt.bracketL) ||\n        this.match(tt.backQuote) ||\n        // Sometimes the tokenizer generates tt.slash for regexps, and this is\n        // handler by parseExprAtom\n        this.match(tt.regexp) ||\n        this.match(tt.slash) ||\n        // This code could be parsed both as a modulo operator or as an intrinsic:\n        //   await %x(0)\n        (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n      ) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n    if (\n      this.match(tt.semi) ||\n      (!this.match(tt.star) && !this.state.type.startsExpr) ||\n      this.hasPrecedingLineBreak()\n    ) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tt.star);\n      node.argument = this.parseMaybeAssign();\n    }\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n\n    return this.parseSmartPipelineBodyInStyle(\n      childExpression,\n      startPos,\n      startLoc,\n    );\n  }\n\n  checkSmartPipelineBodyEarlyErrors(\n    childExpression: N.Expression,\n    startPos: number,\n  ): void {\n    if (this.match(tt.arrow)) {\n      // If the following token is invalidly `=>`, then throw a human-friendly error\n      // instead of something like 'Unexpected token, expected \";\"'.\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, Errors.PipelineTopicUnused);\n      }\n      bodyNode.expression = childExpression;\n    }\n    return this.finishNode(\n      bodyNode,\n      isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\",\n    );\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Enable topic references from outer contexts within smart pipeline bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicPermittingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // Disable topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicForbiddingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Disable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 0,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a primary topic reference (`#`) within the current\n  // topic context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"./error\";\nimport {\n  isIdentifierChar,\n  isIdentifierStart,\n  keywordRelationalOperator,\n} from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    program.sourceType = this.options.sourceType;\n\n    program.interpreter = this.parseInterpreterDirective();\n\n    this.parseBlockBody(program, true, true, tt.eof);\n\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = this.tokens;\n\n    return this.finishNode(file, \"File\");\n  }\n\n  // TODO\n\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const expr = stmt.expression;\n\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n\n    directive.value = this.finishNodeAt(\n      directiveLiteral,\n      \"DirectiveLiteral\",\n      expr.end,\n      expr.loc.end,\n    );\n\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === charCodes.leftSquareBracket) return true;\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(\n        node.start,\n        {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n        },\n        Errors.ImportOutsideModule,\n      );\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    if (this.match(tt._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\")\n        ? \"for-of statement\"\n        : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, BIND_LEXICAL, null, \"catch clause\");\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n      this.scope.exit();\n\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const octalPositions = [];\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      // Track octal literals that occur before a \"use strict\" directive.\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n          hasStrictModeDirective = true;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    // Throw an error for any octal literals found before a\n    // \"use strict\" directive. Strict mode will be set at parse\n    // time for any literals that occur after the directive.\n    if (this.state.strict && octalPositions.length) {\n      for (const pos of octalPositions) {\n        this.raise(pos, Errors.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.expect(tt.semi);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.expect(tt.semi);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      \"variable declaration\",\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n\n    this.expect(tt.parenL);\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    constructorAllowsSuper: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state = { hadConstructor: false };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    constructorAllowsSuper: boolean,\n  ): void {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic && this.parseClassMemberFromModifier(classBody, member)) {\n      // a class element named 'static'\n      return;\n    }\n\n    this.parseClassMemberWithIsStatic(\n      classBody,\n      member,\n      state,\n      isStatic,\n      constructorAllowsSuper,\n    );\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    isStatic: boolean,\n    constructorAllowsSuper: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    // Check the key is not a computed expression or string literal.\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isSimple &&\n      key.name === \"async\" &&\n      !containsEsc &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isSimple &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !containsEsc &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      this.parseClassElementName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const key = this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n\n    if (\n      !member.computed &&\n      member.static &&\n      ((key: $FlowSubtype<N.Identifier>).name === \"prototype\" ||\n        (key: $FlowSubtype<N.StringLiteral>).value === \"prototype\")\n    ) {\n      this.raise(key.start, Errors.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, Errors.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      node.key.id.name,\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.semicolon();\n    this.prodParam.exit();\n\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n\n    if (this.match(tt.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssignAllowIn();\n    } else {\n      node.value = null;\n    }\n    this.semicolon();\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      const value = this.state.value;\n      if ((value === \"async\" && !this.state.containsEsc) || value === \"let\") {\n        return false;\n      }\n      if (\n        (value === \"type\" || value === \"interface\") &&\n        !this.state.containsEsc\n      ) {\n        const l = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (l.type === tt.name && l.value !== \"from\") ||\n          l.type === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (this.match(tt.name) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(declaration.start, Errors.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            // check for keywords used as local names\n            this.checkReservedWord(\n              specifier.local.name,\n              specifier.local.start,\n              true,\n              false,\n            );\n            // check if export is defined\n            // $FlowIgnore\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\")\n        ? this.parseIdentifier(true)\n        : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-module-attributes\n    // parse module attributes if the next token is `with` or ignore and finish the ImportDeclaration node.\n    const attributes = this.maybeParseModuleAttributes();\n    if (attributes) {\n      node.attributes = attributes;\n    }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      contextDescription,\n    );\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      // we are trying to parse a node which has the following syntax\n      // with type: \"json\"\n      // [with -> keyword], [type -> Identifier], [\":\" -> token for colon], [\"json\" -> StringLiteral]\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      // for now we are only allowing `type` as the only allowed module attribute\n      if (node.key.name !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          node.key.name,\n        );\n      }\n\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      // check if the value set to the module attribute is a string as we only allow string literals\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(\n        specifier.imported.name,\n        specifier.start,\n        true,\n        true,\n      );\n      specifier.local = specifier.imported.__clone();\n    }\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      \"import specifier\",\n    );\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ScopeHandler from \"../util/scope\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    const ScopeHandler = this.getScopeHandler();\n\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","decimal","regexp","string","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_SCOPE_OUTSIDE","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","filename","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","firstTrailingCommentIndex","findIndex","ErrorMessages","Object","freeze","AccessorIsGenerator","ArgumentsDisallowedInInitializer","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitExpressionFormalParameter","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","errorTemplate","params","raiseWithData","data","message","replace","_","_raise","errorContext","err","SyntaxError","errorRecovery","isLookahead","errors","isSimpleProperty","kind","method","superClass","estreeParseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","estreeParseBigIntLiteral","value","bigInt","BigInt","String","estreeParseDecimalLiteral","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","raw","extra","finishNodeAt","initFunction","isAsync","checkDeclaration","checkGetterSetterParams","prop","paramCount","Errors","checkLVal","expr","bindingType","checkClashes","contextDescription","disallowLetBinding","forEach","checkProto","isRecord","protoRef","refExpressionErrors","isValidDirective","parenthesized","stmtToDirective","parseBlockBody","allowDirectives","topLevel","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseExprAtom","tt","startPos","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","finishNode","parseObjectMethod","isPattern","isAccessor","shorthand","parseObjectProperty","toAssignable","toAssignableObjectExpressionProp","isLast","key","finishCallExpression","optional","callee","toReferencedListDeep","exprList","isParenthesizedExpr","parseExport","exported","specifiers","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","TokContext","isExpr","preserveSpace","override","braceStatement","braceExpression","recordExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","prodParam","hasYield","isIterator","braceIsBlock","statementParens","hasPrecedingLineBreak","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","isIteratorStart","current","next","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","scope","declareName","enter","bodyNode","parseImport","exit","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","lh","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","refNeedsArrowPos","result","tryParse","error","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","constructorAllowsSuper","parseClassMemberFromModifier","getTokenFromCode","charCodeAt","finishOp","readWord","isBinding","element","operator","trailingCommaPos","toReferencedList","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","tc","j_oTag","j_expr","abort","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","add","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","nextTokenStart","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","inPropertyName","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasReturn","hasIn","functionFlags","nonNull","x","assert","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","DeclareClassFieldHasInitializer","DuplicateModifier","EmptyHeritageClauseType","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","TemplateTypeHasSubstitution","TypeAnnotationAfterAssign","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","modifier","tsTryParse","bind","tsParseModifiers","modified","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","tsParseType","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","templateNode","parseTemplate","expressions","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","lookaheadCharCode","parseMaybeUnary","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","asserts","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","containsEsc","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tokenType","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","maybeInArrowParameters","oldYieldPos","yieldPos","oldAwaitPos","awaitPos","tsIsDeclarationStart","parseAssignableListItem","decorators","accessibility","parseAccessModifier","elt","pp","parameter","bodilessType","registerFunctionStatementId","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","args","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","parseStatementContent","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","equal","typeCast","ct","parseBindingAtom","parseMaybeDecoratorArguments","readToken_lt_gt","isInParens","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","placeholder","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","identifier","some","Array","isArray","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","join","moduleAttributesVerionPluginOption","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","State","potentialArrowAt","inParameters","maybeInAsyncArrowHead","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","octalPositions","exportedIdentifiers","tokensLength","curPosition","skipArrays","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","pushToken","checkKeywordEscapes","old","curr","skip","setStrict","lastIndexOf","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","octal","n","readWord1","escStart","identifierCheck","esc","keywordTypes","parent","update","UtilParser","addExtra","op","nameStart","nameEnd","messageOrType","missingPlugin","expectOnePlugin","names","checkYieldAwaitInDefaultParams","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","isLiteralPropertyName","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","parseSpread","parseRestBinding","parseObjectLike","close","closeCharCode","allowEmpty","elts","first","checkCommaAfterRest","parseDecorator","strictModeChanged","elem","ExpressionParser","computed","used","shouldExitDescending","getExpression","paramFlags","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwaitAllowed","parseAwait","isDelete","parseUpdate","parseExprSubscripts","maybeAsyncArrow","oldMaybeInAsyncArrowHead","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseMaybePrivateName","classScope","usePrivateName","parseNoCallExpr","tag","quasi","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","innerParenStart","oldInFSharpPipelineDirectBody","parseExprListItem","parseSuper","parseImportMetaProperty","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseArrayLike","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","nextCh","lookaheadCh","oldLabels","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenStart","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","oldInPropertyName","generator","canBePattern","isTuple","isExpression","oldInParameters","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","nameHash","identifierName","reservedTest","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","StatementParser","interpreter","parseInterpreterDirective","from","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","handler","clause","finalizer","statementStart","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","declarePrivateName","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","checkNames","isDefault","isFrom","nodes","parseNext","maybeParseModuleAttributes","attrs","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}