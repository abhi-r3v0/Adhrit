{"version":3,"file":"cdk-observers.umd.js","sources":["../../../../../src/cdk/observers/observe-content.ts","../../../../../src/cdk/observers/public-api.ts","../../../../../src/cdk/observers/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  coerceElement,\n  BooleanInput\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<Element, {\n    observer: MutationObserver | null,\n    stream: Subject<MutationRecord[]>,\n    count: number\n  }>();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input('cdkObserveContentDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number { return this._debounce; }\n  set debounce(value: number) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(private _contentObserver: ContentObserver,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription =\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    if (this._currentSubscription) {\n      this._currentSubscription.unsubscribe();\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_debounce: BooleanInput;\n}\n\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory]\n})\nexport class ObserversModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './observe-content';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Injectable","coerceElement","Observable","Subject","EventEmitter","coerceBooleanProperty","coerceNumberProperty","debounceTime","Directive","ElementRef","NgZone","Output","Input","NgModule"],"mappings":"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"}