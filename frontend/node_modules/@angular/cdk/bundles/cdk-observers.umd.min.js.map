{"version":3,"sources":["src/cdk/cdk-observers.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","observers","coercion","core","rxjs","operators","this","i0","MutationObserverFactory","prototype","create","callback","MutationObserver","ɵprov","ɵɵdefineInjectable","MutationObserverFactory_Factory","token","providedIn","decorators","type","Injectable","args","ContentObserver","_mutationObserverFactory","_observedElements","Map","ngOnDestroy","_this","forEach","_","element","_cleanupObserver","observe","elementOrRef","coerceElement","Observable","observer","subscription","_observeElement","subscribe","unsubscribe","_unobserveElement","has","get","count","stream_1","Subject","mutations","next","characterData","childList","subtree","set","stream","_a","disconnect","complete","delete","ContentObserver_Factory","ɵɵinject","ctorParameters","ObserversModule","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","EventEmitter","_disabled","_currentSubscription","Object","defineProperty","value","coerceBooleanProperty","_unsubscribe","_subscribe","enumerable","configurable","_debounce","coerceNumberProperty","ngAfterContentInit","disabled","runOutsideAngular","debounce","pipe","debounceTime","Directive","selector","exportAs","ElementRef","NgZone","propDecorators","Output","Input","NgModule","declarations","providers"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core'), require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/observers', ['exports', '@angular/cdk/coercion', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.observers = {}), global.ng.cdk.coercion, global.ng.core, global.rxjs, global.rxjs.operators));\n}(this, (function (exports, coercion, i0, rxjs, operators) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n     * @docs-private\n     */\n    var MutationObserverFactory = /** @class */ (function () {\n        function MutationObserverFactory() {\n        }\n        MutationObserverFactory.prototype.create = function (callback) {\n            return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n        };\n        return MutationObserverFactory;\n    }());\n    MutationObserverFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: \"root\" });\n    MutationObserverFactory.decorators = [\n        { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** An injectable service that allows watching elements for changes to their content. */\n    var ContentObserver = /** @class */ (function () {\n        function ContentObserver(_mutationObserverFactory) {\n            this._mutationObserverFactory = _mutationObserverFactory;\n            /** Keeps track of the existing MutationObservers so they can be reused. */\n            this._observedElements = new Map();\n        }\n        ContentObserver.prototype.ngOnDestroy = function () {\n            var _this = this;\n            this._observedElements.forEach(function (_, element) { return _this._cleanupObserver(element); });\n        };\n        ContentObserver.prototype.observe = function (elementOrRef) {\n            var _this = this;\n            var element = coercion.coerceElement(elementOrRef);\n            return new rxjs.Observable(function (observer) {\n                var stream = _this._observeElement(element);\n                var subscription = stream.subscribe(observer);\n                return function () {\n                    subscription.unsubscribe();\n                    _this._unobserveElement(element);\n                };\n            });\n        };\n        /**\n         * Observes the given element by using the existing MutationObserver if available, or creating a\n         * new one if not.\n         */\n        ContentObserver.prototype._observeElement = function (element) {\n            if (!this._observedElements.has(element)) {\n                var stream_1 = new rxjs.Subject();\n                var observer = this._mutationObserverFactory.create(function (mutations) { return stream_1.next(mutations); });\n                if (observer) {\n                    observer.observe(element, {\n                        characterData: true,\n                        childList: true,\n                        subtree: true\n                    });\n                }\n                this._observedElements.set(element, { observer: observer, stream: stream_1, count: 1 });\n            }\n            else {\n                this._observedElements.get(element).count++;\n            }\n            return this._observedElements.get(element).stream;\n        };\n        /**\n         * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n         * observing this element.\n         */\n        ContentObserver.prototype._unobserveElement = function (element) {\n            if (this._observedElements.has(element)) {\n                this._observedElements.get(element).count--;\n                if (!this._observedElements.get(element).count) {\n                    this._cleanupObserver(element);\n                }\n            }\n        };\n        /** Clean up the underlying MutationObserver for the specified element. */\n        ContentObserver.prototype._cleanupObserver = function (element) {\n            if (this._observedElements.has(element)) {\n                var _a = this._observedElements.get(element), observer = _a.observer, stream = _a.stream;\n                if (observer) {\n                    observer.disconnect();\n                }\n                stream.complete();\n                this._observedElements.delete(element);\n            }\n        };\n        return ContentObserver;\n    }());\n    ContentObserver.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(i0.ɵɵinject(MutationObserverFactory)); }, token: ContentObserver, providedIn: \"root\" });\n    ContentObserver.decorators = [\n        { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    ContentObserver.ctorParameters = function () { return [\n        { type: MutationObserverFactory }\n    ]; };\n    /**\n     * Directive that triggers a callback whenever the content of\n     * its associated element has changed.\n     */\n    var CdkObserveContent = /** @class */ (function () {\n        function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {\n            this._contentObserver = _contentObserver;\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            /** Event emitted for each change in the element's content. */\n            this.event = new i0.EventEmitter();\n            this._disabled = false;\n            this._currentSubscription = null;\n        }\n        Object.defineProperty(CdkObserveContent.prototype, \"disabled\", {\n            /**\n             * Whether observing content is disabled. This option can be used\n             * to disconnect the underlying MutationObserver until it is needed.\n             */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._disabled ? this._unsubscribe() : this._subscribe();\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(CdkObserveContent.prototype, \"debounce\", {\n            /** Debounce interval for emitting the changes. */\n            get: function () { return this._debounce; },\n            set: function (value) {\n                this._debounce = coercion.coerceNumberProperty(value);\n                this._subscribe();\n            },\n            enumerable: false,\n            configurable: true\n        });\n        CdkObserveContent.prototype.ngAfterContentInit = function () {\n            if (!this._currentSubscription && !this.disabled) {\n                this._subscribe();\n            }\n        };\n        CdkObserveContent.prototype.ngOnDestroy = function () {\n            this._unsubscribe();\n        };\n        CdkObserveContent.prototype._subscribe = function () {\n            var _this = this;\n            this._unsubscribe();\n            var stream = this._contentObserver.observe(this._elementRef);\n            // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n            // Consider brining it back inside the zone next time we're making breaking changes.\n            // Bringing it back inside can cause things like infinite change detection loops and changed\n            // after checked errors if people's code isn't handling it properly.\n            this._ngZone.runOutsideAngular(function () {\n                _this._currentSubscription =\n                    (_this.debounce ? stream.pipe(operators.debounceTime(_this.debounce)) : stream).subscribe(_this.event);\n            });\n        };\n        CdkObserveContent.prototype._unsubscribe = function () {\n            if (this._currentSubscription) {\n                this._currentSubscription.unsubscribe();\n            }\n        };\n        return CdkObserveContent;\n    }());\n    CdkObserveContent.decorators = [\n        { type: i0.Directive, args: [{\n                    selector: '[cdkObserveContent]',\n                    exportAs: 'cdkObserveContent',\n                },] }\n    ];\n    CdkObserveContent.ctorParameters = function () { return [\n        { type: ContentObserver },\n        { type: i0.ElementRef },\n        { type: i0.NgZone }\n    ]; };\n    CdkObserveContent.propDecorators = {\n        event: [{ type: i0.Output, args: ['cdkObserveContent',] }],\n        disabled: [{ type: i0.Input, args: ['cdkObserveContentDisabled',] }],\n        debounce: [{ type: i0.Input }]\n    };\n    var ObserversModule = /** @class */ (function () {\n        function ObserversModule() {\n        }\n        return ObserversModule;\n    }());\n    ObserversModule.decorators = [\n        { type: i0.NgModule, args: [{\n                    exports: [CdkObserveContent],\n                    declarations: [CdkObserveContent],\n                    providers: [MutationObserverFactory]\n                },] }\n    ];\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CdkObserveContent = CdkObserveContent;\n    exports.ContentObserver = ContentObserver;\n    exports.MutationObserverFactory = MutationObserverFactory;\n    exports.ObserversModule = ObserversModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-observers.umd.js.map\n"]}