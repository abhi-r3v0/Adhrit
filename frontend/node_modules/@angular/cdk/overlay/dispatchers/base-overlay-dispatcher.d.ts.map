{"version":3,"file":"base-overlay-dispatcher.d.ts","sources":["base-overlay-dispatcher.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy } from '@angular/core';\nimport { OverlayReference } from '../overlay-reference';\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nexport declare abstract class BaseOverlayDispatcher implements OnDestroy {\n    /** Currently attached overlays in the order they were attached. */\n    _attachedOverlays: OverlayReference[];\n    protected _document: Document;\n    protected _isAttached: boolean;\n    constructor(document: any);\n    ngOnDestroy(): void;\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef: OverlayReference): void;\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef: OverlayReference): void;\n    /** Detaches the global event listener. */\n    protected abstract detach(): void;\n}\n"]}