{"version":3,"file":"viewport-ruler.d.ts","sources":["viewport-ruler.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { NgZone, OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs';\n/** Time in ms to throttle the resize events by default. */\nexport declare const DEFAULT_RESIZE_TIME = 20;\n/** Object that holds the scroll position of the viewport in each direction. */\nexport interface ViewportScrollPosition {\n    top: number;\n    left: number;\n}\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nexport declare class ViewportRuler implements OnDestroy {\n    private _platform;\n    /** Cached viewport dimensions. */\n    private _viewportSize;\n    /** Stream of viewport change events. */\n    private _change;\n    /** Event listener that will be used to handle the viewport change events. */\n    private _changeListener;\n    /** Used to reference correct document/window */\n    protected _document?: Document;\n    constructor(_platform: Platform, ngZone: NgZone, \n    /** @breaking-change 11.0.0 make document required */\n    document?: any);\n    ngOnDestroy(): void;\n    /** Returns the viewport's width and height. */\n    getViewportSize(): Readonly<{\n        width: number;\n        height: number;\n    }>;\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect(): ClientRect;\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition(): ViewportScrollPosition;\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime?: number): Observable<Event>;\n    /** Access injected document if available or fallback to global document reference */\n    private _getDocument;\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    private _getWindow;\n    /** Updates the cached viewport size. */\n    private _updateViewportSize;\n}\n"]}