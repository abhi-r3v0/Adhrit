{"version":3,"file":"live-announcer.d.ts","sources":["live-announcer.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ContentObserver } from '@angular/cdk/observers';\nimport { ElementRef, NgZone, OnDestroy } from '@angular/core';\nimport { AriaLivePoliteness, LiveAnnouncerDefaultOptions } from './live-announcer-tokens';\nexport declare class LiveAnnouncer implements OnDestroy {\n    private _ngZone;\n    private _defaultOptions?;\n    private _liveElement;\n    private _document;\n    private _previousTimeout?;\n    constructor(elementToken: any, _ngZone: NgZone, _document: any, _defaultOptions?: LiveAnnouncerDefaultOptions | undefined);\n    /**\n     * Announces a message to screenreaders.\n     * @param message Message to be announced to the screenreader.\n     * @returns Promise that will be resolved when the message is added to the DOM.\n     */\n    announce(message: string): Promise<void>;\n    /**\n     * Announces a message to screenreaders.\n     * @param message Message to be announced to the screenreader.\n     * @param politeness The politeness of the announcer element.\n     * @returns Promise that will be resolved when the message is added to the DOM.\n     */\n    announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;\n    /**\n     * Announces a message to screenreaders.\n     * @param message Message to be announced to the screenreader.\n     * @param duration Time in milliseconds after which to clear out the announcer element. Note\n     *   that this takes effect after the message has been added to the DOM, which can be up to\n     *   100ms after `announce` has been called.\n     * @returns Promise that will be resolved when the message is added to the DOM.\n     */\n    announce(message: string, duration?: number): Promise<void>;\n    /**\n     * Announces a message to screenreaders.\n     * @param message Message to be announced to the screenreader.\n     * @param politeness The politeness of the announcer element.\n     * @param duration Time in milliseconds after which to clear out the announcer element. Note\n     *   that this takes effect after the message has been added to the DOM, which can be up to\n     *   100ms after `announce` has been called.\n     * @returns Promise that will be resolved when the message is added to the DOM.\n     */\n    announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n    clear(): void;\n    ngOnDestroy(): void;\n    private _createLiveElement;\n}\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nexport declare class CdkAriaLive implements OnDestroy {\n    private _elementRef;\n    private _liveAnnouncer;\n    private _contentObserver;\n    private _ngZone;\n    /** The aria-live politeness level to use when announcing messages. */\n    get politeness(): AriaLivePoliteness;\n    set politeness(value: AriaLivePoliteness);\n    private _politeness;\n    private _previousAnnouncedText?;\n    private _subscription;\n    constructor(_elementRef: ElementRef, _liveAnnouncer: LiveAnnouncer, _contentObserver: ContentObserver, _ngZone: NgZone);\n    ngOnDestroy(): void;\n}\n"]}