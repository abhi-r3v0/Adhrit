{"version":3,"file":"autofill.d.ts","sources":["autofill.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n/** An event that is emitted when the autofill state of an input changes. */\nexport declare type AutofillEvent = {\n    /** The element whose autofill state changes. */\n    target: Element;\n    /** Whether the element is currently autofilled. */\n    isAutofilled: boolean;\n};\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nexport declare class AutofillMonitor implements OnDestroy {\n    private _platform;\n    private _ngZone;\n    private _monitoredElements;\n    constructor(_platform: Platform, _ngZone: NgZone);\n    /**\n     * Monitor for changes in the autofill state of the given input element.\n     * @param element The element to monitor.\n     * @return A stream of autofill state changes.\n     */\n    monitor(element: Element): Observable<AutofillEvent>;\n    /**\n     * Monitor for changes in the autofill state of the given input element.\n     * @param element The element to monitor.\n     * @return A stream of autofill state changes.\n     */\n    monitor(element: ElementRef<Element>): Observable<AutofillEvent>;\n    /**\n     * Stop monitoring the autofill state of the given input element.\n     * @param element The element to stop monitoring.\n     */\n    stopMonitoring(element: Element): void;\n    /**\n     * Stop monitoring the autofill state of the given input element.\n     * @param element The element to stop monitoring.\n     */\n    stopMonitoring(element: ElementRef<Element>): void;\n    ngOnDestroy(): void;\n}\n/** A directive that can be used to monitor the autofill state of an input. */\nexport declare class CdkAutofill implements OnDestroy, OnInit {\n    private _elementRef;\n    private _autofillMonitor;\n    /** Emits when the autofill state of the element changes. */\n    cdkAutofill: EventEmitter<AutofillEvent>;\n    constructor(_elementRef: ElementRef<HTMLElement>, _autofillMonitor: AutofillMonitor);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n}\n"]}