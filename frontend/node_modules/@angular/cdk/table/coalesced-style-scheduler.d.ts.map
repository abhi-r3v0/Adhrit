{"version":3,"file":"coalesced-style-scheduler.d.ts","sources":["coalesced-style-scheduler.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone, OnDestroy } from '@angular/core';\n/**\n * @docs-private\n */\nexport declare class _Schedule {\n    tasks: (() => unknown)[];\n    endTasks: (() => unknown)[];\n}\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nexport declare class _CoalescedStyleScheduler implements OnDestroy {\n    private readonly _ngZone;\n    private _currentSchedule;\n    private readonly _destroyed;\n    constructor(_ngZone: NgZone);\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task: () => unknown): void;\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task: () => unknown): void;\n    /** Prevent any further tasks from running. */\n    ngOnDestroy(): void;\n    private _createScheduleIfNeeded;\n    private _getScheduleObservable;\n}\n"]}