{"version":3,"file":"row.d.ts","sources":["row.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { IterableChanges, IterableDiffer, IterableDiffers, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { CanStick, CanStickCtor } from './can-stick';\nimport { CdkCellDef, CdkColumnDef } from './cell';\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nexport declare const CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nexport declare abstract class BaseRowDef implements OnChanges {\n    /** @docs-private */ template: TemplateRef<any>;\n    protected _differs: IterableDiffers;\n    /** The columns to be displayed on this row. */\n    columns: Iterable<string>;\n    /** Differ used to check if any changes were made to the columns. */\n    protected _columnsDiffer: IterableDiffer<any>;\n    constructor(\n    /** @docs-private */ template: TemplateRef<any>, _differs: IterableDiffers);\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff(): IterableChanges<any> | null;\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column: CdkColumnDef): TemplateRef<any>;\n}\n/** @docs-private */\ndeclare class CdkHeaderRowDefBase extends BaseRowDef {\n}\ndeclare const _CdkHeaderRowDefBase: CanStickCtor & typeof CdkHeaderRowDefBase;\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport declare class CdkHeaderRowDef extends _CdkHeaderRowDefBase implements CanStick, OnChanges {\n    _table?: any;\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers, _table?: any);\n    ngOnChanges(changes: SimpleChanges): void;\n    static ngAcceptInputType_sticky: BooleanInput;\n}\n/** @docs-private */\ndeclare class CdkFooterRowDefBase extends BaseRowDef {\n}\ndeclare const _CdkFooterRowDefBase: CanStickCtor & typeof CdkFooterRowDefBase;\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nexport declare class CdkFooterRowDef extends _CdkFooterRowDefBase implements CanStick, OnChanges {\n    _table?: any;\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers, _table?: any);\n    ngOnChanges(changes: SimpleChanges): void;\n    static ngAcceptInputType_sticky: BooleanInput;\n}\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nexport declare class CdkRowDef<T> extends BaseRowDef {\n    _table?: any;\n    /**\n     * Function that should return true if this row template should be used for the provided index\n     * and row data. If left undefined, this row will be considered the default row template to use\n     * when no other when functions return true for the data.\n     * For every row, there must be at least one when function that passes or an undefined to default.\n     */\n    when: (index: number, rowData: T) => boolean;\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers, _table?: any);\n}\n/** Context provided to the row cells when `multiTemplateDataRows` is false */\nexport interface CdkCellOutletRowContext<T> {\n    /** Data for the row that this cell is located within. */\n    $implicit?: T;\n    /** Index of the data object in the provided data array. */\n    index?: number;\n    /** Length of the number of total rows. */\n    count?: number;\n    /** True if this cell is contained in the first row. */\n    first?: boolean;\n    /** True if this cell is contained in the last row. */\n    last?: boolean;\n    /** True if this cell is contained in a row with an even-numbered index. */\n    even?: boolean;\n    /** True if this cell is contained in a row with an odd-numbered index. */\n    odd?: boolean;\n}\n/**\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\n * `renderIndex`.\n */\nexport interface CdkCellOutletMultiRowContext<T> {\n    /** Data for the row that this cell is located within. */\n    $implicit?: T;\n    /** Index of the data object in the provided data array. */\n    dataIndex?: number;\n    /** Index location of the rendered row that this cell is located within. */\n    renderIndex?: number;\n    /** Length of the number of total rows. */\n    count?: number;\n    /** True if this cell is contained in the first row. */\n    first?: boolean;\n    /** True if this cell is contained in the last row. */\n    last?: boolean;\n    /** True if this cell is contained in a row with an even-numbered index. */\n    even?: boolean;\n    /** True if this cell is contained in a row with an odd-numbered index. */\n    odd?: boolean;\n}\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nexport declare class CdkCellOutlet implements OnDestroy {\n    _viewContainer: ViewContainerRef;\n    /** The ordered list of cells to render within this outlet's view container */\n    cells: CdkCellDef[];\n    /** The data context to be provided to each cell */\n    context: any;\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static mostRecentCellOutlet: CdkCellOutlet | null;\n    constructor(_viewContainer: ViewContainerRef);\n    ngOnDestroy(): void;\n}\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nexport declare class CdkHeaderRow {\n}\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nexport declare class CdkFooterRow {\n}\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nexport declare class CdkRow {\n}\n/** Row that can be used to display a message when no data is shown in the table. */\nexport declare class CdkNoDataRow {\n    templateRef: TemplateRef<any>;\n    constructor(templateRef: TemplateRef<any>);\n}\nexport {};\n"]}