{"version":3,"file":"drop-list.d.ts","sources":["drop-list.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { ElementRef, EventEmitter, OnDestroy, ChangeDetectorRef, InjectionToken } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { CdkDrag } from './drag';\nimport { CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent } from '../drag-events';\nimport { CdkDropListGroup } from './drop-list-group';\nimport { DropListRef } from '../drop-list-ref';\nimport { DragDrop } from '../drag-drop';\nimport { DropListOrientation, DragAxis, DragDropConfig } from './config';\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {\n}\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport declare const CDK_DROP_LIST: InjectionToken<CdkDropList<any>>;\n/** Container that wraps a set of draggable items. */\nexport declare class CdkDropList<T = any> implements OnDestroy {\n    /** Element that the drop list is attached to. */\n    element: ElementRef<HTMLElement>;\n    private _changeDetectorRef;\n    private _dir?;\n    private _group?;\n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    private _scrollDispatcher?;\n    /** Emits when the list has been destroyed. */\n    private _destroyed;\n    /** Whether the element's scrollable parents have been resolved. */\n    private _scrollableParentsResolved;\n    /** Keeps track of the drop lists that are currently on the page. */\n    private static _dropLists;\n    /** Reference to the underlying drop list instance. */\n    _dropListRef: DropListRef<CdkDropList<T>>;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     */\n    connectedTo: (CdkDropList | string)[] | CdkDropList | string;\n    /** Arbitrary data to attach to this container. */\n    data: T;\n    /** Direction in which the list is oriented. */\n    orientation: DropListOrientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     */\n    id: string;\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis: DragAxis;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    private _disabled;\n    /** Whether sorting within this drop list is disabled. */\n    sortingDisabled: boolean;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean;\n    /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n    autoScrollDisabled: boolean;\n    /** Emits when the user drops an item inside the container. */\n    dropped: EventEmitter<CdkDragDrop<T, any>>;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered: EventEmitter<CdkDragEnter<T>>;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited: EventEmitter<CdkDragExit<T>>;\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted: EventEmitter<CdkDragSortEvent<T>>;\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     */\n    private _unsortedItems;\n    constructor(\n    /** Element that the drop list is attached to. */\n    element: ElementRef<HTMLElement>, dragDrop: DragDrop, _changeDetectorRef: ChangeDetectorRef, _dir?: Directionality | undefined, _group?: CdkDropListGroup<CdkDropList<any>> | undefined, \n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    _scrollDispatcher?: ScrollDispatcher | undefined, config?: DragDropConfig);\n    /** Registers an items with the drop list. */\n    addItem(item: CdkDrag): void;\n    /** Removes an item from the drop list. */\n    removeItem(item: CdkDrag): void;\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems(): CdkDrag[];\n    ngOnDestroy(): void;\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    private _setupInputSyncSubscription;\n    /** Handles events from the underlying DropListRef. */\n    private _handleEvents;\n    /** Assigns the default input values based on a provided config object. */\n    private _assignDefaults;\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    private _syncItemsWithRef;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_sortingDisabled: BooleanInput;\n    static ngAcceptInputType_autoScrollDisabled: BooleanInput;\n}\n"]}