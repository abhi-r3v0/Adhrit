{"version":3,"file":"accordion-item.d.ts","sources":["accordion-item.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { CdkAccordion } from './accordion';\nimport { BooleanInput } from '@angular/cdk/coercion';\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport declare class CdkAccordionItem implements OnDestroy {\n    accordion: CdkAccordion;\n    private _changeDetectorRef;\n    protected _expansionDispatcher: UniqueSelectionDispatcher;\n    /** Subscription to openAll/closeAll events. */\n    private _openCloseAllSubscription;\n    /** Event emitted every time the AccordionItem is closed. */\n    closed: EventEmitter<void>;\n    /** Event emitted every time the AccordionItem is opened. */\n    opened: EventEmitter<void>;\n    /** Event emitted when the AccordionItem is destroyed. */\n    destroyed: EventEmitter<void>;\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * @docs-private\n     */\n    expandedChange: EventEmitter<boolean>;\n    /** The unique AccordionItem id. */\n    readonly id: string;\n    /** Whether the AccordionItem is expanded. */\n    get expanded(): any;\n    set expanded(expanded: any);\n    private _expanded;\n    /** Whether the AccordionItem is disabled. */\n    get disabled(): any;\n    set disabled(disabled: any);\n    private _disabled;\n    /** Unregister function for _expansionDispatcher. */\n    private _removeUniqueSelectionListener;\n    constructor(accordion: CdkAccordion, _changeDetectorRef: ChangeDetectorRef, _expansionDispatcher: UniqueSelectionDispatcher);\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy(): void;\n    /** Toggles the expanded state of the accordion item. */\n    toggle(): void;\n    /** Sets the expanded state of the accordion item to false. */\n    close(): void;\n    /** Sets the expanded state of the accordion item to true. */\n    open(): void;\n    private _subscribeToOpenCloseAllActions;\n    static ngAcceptInputType_expanded: BooleanInput;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\n"]}