{"version":3,"file":"accordion.js","sources":["../../../../../../src/cdk/accordion/accordion.ts","../../../../../../src/cdk/accordion/accordion-item.ts","../../../../../../src/cdk/accordion/accordion-module.ts","../../../../../../src/cdk/accordion/public-api.ts","../../../../../../src/cdk/accordion/index.ts"],"names":["nextId"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;AACA,IAAI,MAAM,GAAG,CAAC,CAAC;AACf;AACG;AACoF;AACC;AACnC;AAErD,MAAa,aAAa,GAAG,IAAI,cAAc,CAAe,cAAc,CAAC,CAAC;AAC9E;AACG;AACqF;AAOxF,MAAa,YAAY;AAAG,IAL5B;AACG;AACgB,QAKR,kBAAa,GAAG,IAAI,OAAO,EAAiB,CAAC;AACxD;AAEK,QAAM,yBAAoB,GAAqB,IAAI,OAAO,EAAW,CAAC;AAC3E;AAEK,QAAM,OAAE,GAAG,iBAAiB,MAAM,EAAE,EAAE,CAAC;AAC5C,QAKU,WAAM,GAAY,KAAK,CAAC;AAClC,KA0BC;AACD;AAAgG,IA/B9F,IACI,KAAK,KAAc,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;AAC9C,IAAE,IAAI,KAAK,CAAC,KAAc,IAAI,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;AAC3E;AAEiD,IAC/C,OAAO;AAAK,QACV,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAC7B,KAAG;AACH;AAEC,IAAC,QAAQ;AAAK,QACX,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC9B,KAAG;AACH,IACE,WAAW,CAAC,OAAsB;AACpC,QAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACrC,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;AAClC,KAAG;AACH,IACU,aAAa,CAAC,QAAiB;AAAI,QACzC,IAAI,IAAI,CAAC,KAAK,EAAE;AACpB,YAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC/C,SAAK;AACL,KAAG;AACH;wCA5CC,SAAS,SAAC,kBACT,QAAQ,EAAE;yBAA+B,kBACzC,QAAQ,EAAE,cAAc,kBACxB,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,YAAY,EAAC,CAAC,eACjE,8IACI;AAAC;AAAgC,oBAWnC,KAAK;AACP;;;;;;;;;;oBAAE;AAAC;AC1CJ;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA,IAAIA,QAAM,GAAG,CAAC,CAAC;AACf,WAWuC,SAAS;AAAE;AAC/C;AAG4B;AACsB;AAFrD,MAAa,gBAAgB;AAAG,IA2D9B,YAAkE,SAAuB,EACrE,kBAAqC,EACnC,oBAA+C;AACvE,QAHoE,cAAS,GAAT,SAAS,CAAc;AAAC,QACtE,uBAAkB,GAAlB,kBAAkB,CAAmB;AAAC,QACpC,yBAAoB,GAApB,oBAAoB,CAA2B;AAAC;AAE7D,QA7DD,8BAAyB,GAAG,YAAY,CAAC,KAAK,CAAC;AACzD;AACM,QAAM,WAAM,GAAuB,IAAI,YAAY,EAAQ,CAAC;AAClE;AACM,QAAM,WAAM,GAAuB,IAAI,YAAY,EAAQ,CAAC;AAClE;AACM,QAAM,cAAS,GAAuB,IAAI,YAAY,EAAQ,CAAC;AACrE;AAEK;AACM;AACM;AAEA;AAAY,QAAjB,mBAAc,GAA0B,IAAI,YAAY,EAAW,CAAC;AAChF;AAEK,QAAM,OAAE,GAAW,uBAAuBA,QAAM,EAAE,EAAE,CAAC;AAC1D,QA6BU,cAAS,GAAG,KAAK,CAAC;AAC5B,QAKU,cAAS,GAAY,KAAK,CAAC;AACrC;AAEK,QAAK,mCAA8B,GAAe,SAAQ,CAAC;AAChE,QAII,IAAI,CAAC,8BAA8B;AACvC,YAAM,oBAAoB,CAAC,MAAM,CAAC,CAAC,EAAU,EAAE,WAAmB;AAClE,gBAAQ,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK;AACnD,oBAAY,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,WAAW,IAAI,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE;AACjE,oBAAU,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAChC,iBAAS;AACT,aAAO,CAAC,CAAC;AACT;AAEG,QAAC,IAAI,IAAI,CAAC,SAAS,EAAE;AACxB,YAAM,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,+BAA+B,EAAE,CAAC;AAC9E,SAAK;AACL,KAAG;AACH;AACiD,IAvD/C,IACI,QAAQ,KAAU,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;AAChD,IAAE,IAAI,QAAQ,CAAC,QAAa;AAC5B,QAAI,QAAQ,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;AAC/C;AAEG,QAAC,IAAI,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE;AACrC,YAAM,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAChC,YAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACzC,YACM,IAAI,QAAQ,EAAE;AACpB,gBAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;AAC3B;AACQ;AACQ;AAEJ;AAAoB,gBAAxB,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;AACzE,gBAAQ,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;AAC/D,aAAO;AAAC,iBAAK;AACb,gBAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;AAC3B,aAAO;AACP;AAEK;AACM,YAAL,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AAC7C,SAAK;AACL,KAAG;AACH;AAEoB,IAClB,IACI,QAAQ,KAAK,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;AAC3C,IAAE,IAAI,QAAQ,CAAC,QAAa,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC,EAAE;AACnF;AAE2B,IAqBzB,WAAW;AACb,QAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;AAC3B,QAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;AAC3B,QAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;AAC1B,QAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;AAC9B,QAAI,IAAI,CAAC,8BAA8B,EAAE,CAAC;AAC1C,QAAI,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,CAAC;AACjD,KAAG;AACH;AAEC,IAAC,MAAM;AAAK,QACT,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AACxB,YAAM,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;AACrC,SAAK;AACL,KAAG;AACH;AAEC,IAAC,KAAK;AAAK,QACR,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AACxB,YAAM,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC5B,SAAK;AACL,KAAG;AACH;AAEC,IAAC,IAAI;AAAK,QACP,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AACxB,YAAM,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC3B,SAAK;AACL,KAAG;AACH,IACU,+BAA+B;AAAK,QAC1C,OAAO,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,SAAS,CAAC,QAAQ;AACjE;AACM,YAAA,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AAC1B,gBAAQ,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACjC,aAAO;AACP,SAAK,CAAC,CAAC;AACP,KAAG;AACH;4CA5HC,SAAS,SAAC,kBACT,QAAQ,EAAE,wCAAwC,kBAClD,QAAQ,EAAE,kBAAkB,kBAC5B,SAAS,EAAE;6HAGT,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,IAAW,EAAC,mBAC9C,eACF;;;;eACI;AAAC;AAA0C,YApBzB,YAAY,uBA+EpB,QAAQ,YAAI,MAAM,SAAC,aAAa,cAAG,QAAQ;AAAO,YApF/D,iBAAiB;AACjB,YAGM,yBAAyB;AAAG;AAAG;AAChC,qBAwBJ,MAAM;AAAK,qBAEX,MAAM;AAAK,wBAEX,MAAM;AAAK,6BAOX,MAAM;AAAK,uBAMX,KAAK;AACN,uBA6BC,KAAK;AACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AC5FJ;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MASa,kBAAkB;AAAG;8CAJjC,QAAQ,SAAC;AACR,OAAO,EAAE,CAAC,YAAY,EAAE,gBAAgB,CAAC,kBACzC,YAAY,EAAE,CAAC,YAAY,EAAE,gBAAgB,CAAC,eAC/C;;;;;;;;0BACI;AAAC;ACjBN;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;ACPA;AACA;AACA,GAAG;AACH;AACA;AAEkG","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, InjectionToken, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean { return this._multi; }\n  set multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    this._openCloseAll(true);\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAll(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  private _openCloseAll(expanded: boolean): void {\n    if (this.multi) {\n      this._openCloseAllActions.next(expanded);\n    }\n  }\n\n  static ngAcceptInputType_multi: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): any { return this._expanded; }\n  set expanded(expanded: any) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(disabled: any) { this._disabled = coerceBooleanProperty(disabled); }\n  private _disabled: boolean = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(@Optional() @Inject(CDK_ACCORDION) @SkipSelf() public accordion: CdkAccordion,\n              private _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n\n  static ngAcceptInputType_expanded: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {CdkAccordionItem} from './accordion-item';\nexport {CdkAccordion} from './accordion';\nexport * from './accordion-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CDK_ACCORDION as Éµangular_material_src_cdk_accordion_accordion_a} from './accordion';"]}