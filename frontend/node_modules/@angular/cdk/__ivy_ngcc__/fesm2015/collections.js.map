{"version":3,"file":"collections.js","sources":["../../../../../../src/cdk/collections/data-source.ts","../../../../../../src/cdk/collections/array-data-source.ts","../../../../../../src/cdk/collections/collection-viewer.ts","../../../../../../src/cdk/collections/dispose-view-repeater-strategy.ts","../../../../../../src/cdk/collections/recycle-view-repeater-strategy.ts","../../../../../../src/cdk/collections/selection-model.ts","../../../../../../src/cdk/collections/unique-selection-dispatcher.ts","../../../../../../src/cdk/collections/tree-adapter.ts","../../../../../../src/cdk/collections/view-repeater.ts","../../../../../../src/cdk/collections/public-api.ts","../../../../../../src/cdk/collections/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {CollectionViewer} from './collection-viewer';\n\nexport abstract class DataSource<T> {\n  /**\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\n   * the stream provided will be accessed during change detection and should not directly change\n   * values that are bound in template views.\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @returns Observable that emits a new value when the data changes.\n   */\n  abstract connect(collectionViewer: CollectionViewer): Observable<T[] | ReadonlyArray<T>>;\n\n  /**\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\n   *\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   */\n  abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n\n/** Checks whether an object is a data source. */\nexport function isDataSource(value: any): value is DataSource<any> {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource.\n  return value && typeof value.connect === 'function';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, isObservable, of as observableOf} from 'rxjs';\nimport {DataSource} from './data-source';\n\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n  constructor(private _data: T[] | ReadonlyArray<T> | Observable<T[] | ReadonlyArray<T>>) {\n    super();\n  }\n\n  connect(): Observable<T[] | ReadonlyArray<T>> {\n    return isObservable(this._data) ? this._data : observableOf(this._data);\n  }\n\n  disconnect() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\n\n/** Represents a range of numbers with a specified start and end. */\nexport type ListRange = {start: number, end: number};\n\n\n/**\n * Interface for any component that provides a view of some data collection and wants to provide\n * information regarding the view and any changes made.\n */\nexport interface CollectionViewer {\n  /**\n   * A stream that emits whenever the `CollectionViewer` starts looking at a new portion of the\n   * data. The `start` index is inclusive, while the `end` is exclusive.\n   */\n  viewChange: Observable<ListRange>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  EmbeddedViewRef,\n  IterableChangeRecord,\n  IterableChanges,\n  ViewContainerRef\n} from '@angular/core';\nimport {\n  _ViewRepeater,\n  _ViewRepeaterItemChanged,\n  _ViewRepeaterItemContext,\n  _ViewRepeaterItemContextFactory,\n  _ViewRepeaterItemValueResolver,\n  _ViewRepeaterOperation\n} from './view-repeater';\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport class _DisposeViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>>\n    implements _ViewRepeater<T, R, C> {\n  applyChanges(changes: IterableChanges<R>,\n               viewContainerRef: ViewContainerRef,\n               itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n               itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n               itemViewChanged?: _ViewRepeaterItemChanged<R, C>) {\n    changes.forEachOperation(\n        (record: IterableChangeRecord<R>,\n         adjustedPreviousIndex: number | null,\n         currentIndex: number | null) => {\n          let view: EmbeddedViewRef<C> | undefined;\n          let operation: _ViewRepeaterOperation;\n          if (record.previousIndex == null) {\n            const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n            view = viewContainerRef.createEmbeddedView(\n                insertContext.templateRef, insertContext.context, insertContext.index);\n            operation = _ViewRepeaterOperation.INSERTED;\n          } else if (currentIndex == null) {\n            viewContainerRef.remove(adjustedPreviousIndex!);\n            operation = _ViewRepeaterOperation.REMOVED;\n          } else {\n            view = viewContainerRef.get(adjustedPreviousIndex!) as EmbeddedViewRef<C>;\n            viewContainerRef.move(view!, currentIndex);\n            operation = _ViewRepeaterOperation.MOVED;\n          }\n\n          if (itemViewChanged) {\n            itemViewChanged({\n              context: view?.context,\n              operation,\n              record,\n            });\n          }\n        });\n  }\n\n  detach() {\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  EmbeddedViewRef,\n  IterableChangeRecord,\n  IterableChanges,\n  ViewContainerRef\n} from '@angular/core';\nimport {\n  _ViewRepeater,\n  _ViewRepeaterItemChanged,\n  _ViewRepeaterItemContext,\n  _ViewRepeaterItemContextFactory,\n  _ViewRepeaterItemInsertArgs,\n  _ViewRepeaterItemValueResolver,\n  _ViewRepeaterOperation\n} from './view-repeater';\n\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport class _RecycleViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>>\n    implements _ViewRepeater<T, R, C> {\n  /**\n   * The size of the cache used to store unused views.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n   */\n  viewCacheSize: number = 20;\n\n  /**\n   * View cache that stores embedded view instances that have been previously stamped out,\n   * but don't are not currently rendered. The view repeater will reuse these views rather than\n   * creating brand new ones.\n   *\n   * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n   */\n  private _viewCache: EmbeddedViewRef<C>[] = [];\n\n  /** Apply changes to the DOM. */\n  applyChanges(changes: IterableChanges<R>,\n               viewContainerRef: ViewContainerRef,\n               itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n               itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n               itemViewChanged?: _ViewRepeaterItemChanged<R, C>) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation((record: IterableChangeRecord<R>,\n                              adjustedPreviousIndex: number | null,\n                              currentIndex: number | null) => {\n      let view: EmbeddedViewRef<C> | undefined;\n      let operation: _ViewRepeaterOperation;\n      if (record.previousIndex == null) {  // Item added.\n        const viewArgsFactory = () => itemContextFactory(\n            record, adjustedPreviousIndex, currentIndex);\n        view = this._insertView(viewArgsFactory, currentIndex!, viewContainerRef,\n            itemValueResolver(record));\n        operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n      } else if (currentIndex == null) {  // Item removed.\n        this._detachAndCacheView(adjustedPreviousIndex!, viewContainerRef);\n        operation = _ViewRepeaterOperation.REMOVED;\n      } else {  // Item moved.\n        view = this._moveView(adjustedPreviousIndex!, currentIndex!, viewContainerRef,\n            itemValueResolver(record));\n        operation = _ViewRepeaterOperation.MOVED;\n      }\n\n      if (itemViewChanged) {\n        itemViewChanged({\n          context: view?.context,\n          operation,\n          record,\n        });\n      }\n    });\n  }\n\n  detach() {\n    for (const view of this._viewCache) {\n      view.destroy();\n    }\n  }\n\n  /**\n   * Inserts a view for a new item, either from the cache or by creating a new\n   * one. Returns `undefined` if the item was inserted into a cached view.\n   */\n  private _insertView(viewArgsFactory: () => _ViewRepeaterItemInsertArgs<C>, currentIndex: number,\n                      viewContainerRef: ViewContainerRef,\n                      value: T): EmbeddedViewRef<C> | undefined {\n    let cachedView = this._insertViewFromCache(currentIndex!, viewContainerRef);\n    if (cachedView) {\n      cachedView.context.$implicit = value;\n      return undefined;\n    }\n\n    const viewArgs = viewArgsFactory();\n    return viewContainerRef.createEmbeddedView(\n        viewArgs.templateRef, viewArgs.context, viewArgs.index);\n  }\n\n  /** Detaches the view at the given index and inserts into the view cache. */\n  private _detachAndCacheView(index: number, viewContainerRef: ViewContainerRef) {\n    const detachedView = this._detachView(index, viewContainerRef);\n    this._maybeCacheView(detachedView, viewContainerRef);\n  }\n\n  /** Moves view at the previous index to the current index. */\n  private _moveView(adjustedPreviousIndex: number, currentIndex: number,\n                    viewContainerRef: ViewContainerRef, value: T): EmbeddedViewRef<C> {\n    const view = viewContainerRef.get(adjustedPreviousIndex!) as\n        EmbeddedViewRef<C>;\n    viewContainerRef.move(view, currentIndex);\n    view.context.$implicit = value;\n    return view;\n  }\n\n  /**\n   * Cache the given detached view. If the cache is full, the view will be\n   * destroyed.\n   */\n  private _maybeCacheView(view: EmbeddedViewRef<C>, viewContainerRef: ViewContainerRef) {\n    if (this._viewCache.length < this.viewCacheSize) {\n      this._viewCache.push(view);\n    } else {\n      const index = viewContainerRef.indexOf(view);\n\n      // The host component could remove views from the container outside of\n      // the view repeater. It's unlikely this will occur, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n      if (index === -1) {\n        view.destroy();\n      } else {\n        viewContainerRef.remove(index);\n      }\n    }\n  }\n\n  /** Inserts a recycled view from the cache at the given index. */\n  private _insertViewFromCache(index: number,\n                               viewContainerRef: ViewContainerRef): EmbeddedViewRef<C> | null {\n    const cachedView = this._viewCache.pop();\n    if (cachedView) {\n      viewContainerRef.insert(cachedView, index);\n    }\n    return cachedView || null;\n  }\n\n  /** Detaches the embedded view at the given index. */\n  private _detachView(index: number, viewContainerRef: ViewContainerRef): EmbeddedViewRef<C> {\n    return viewContainerRef.detach(index) as EmbeddedViewRef<C>;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n  /** Currently-selected values. */\n  private _selection = new Set<T>();\n\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\n  private _deselectedToEmit: T[] = [];\n\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\n  private _selectedToEmit: T[] = [];\n\n  /** Cache for the array value of the selected items. */\n  private _selected: T[] | null;\n\n  /** Selected values. */\n  get selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  changed: Subject<SelectionChange<T>> = new Subject();\n\n  constructor(\n    private _multiple = false,\n    initiallySelectedValues?: T[],\n    private _emitChanges = true) {\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n\n  /**\n   * Selects a value or an array of values.\n   */\n  select(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Deselects a value or an array of values.\n   */\n  deselect(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Toggles a value between selected and deselected.\n   */\n  toggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n\n  /**\n   * Clears all of the selected values.\n   */\n  clear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue(): boolean {\n    return !this.isEmpty();\n  }\n\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate?: (a: T, b: T) => number): void {\n    if (this._multiple && this.selected) {\n      this._selected!.sort(predicate);\n    }\n  }\n\n  /**\n   * Gets whether multiple values can be selected.\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n\n  /** Emits a change event and clears the records of selected and deselected values. */\n  private _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit\n      });\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n\n  /** Selects a value. */\n  private _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Deselects a value. */\n  private _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Clears out the selected values. */\n  private _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  private _verifyValueAssignment(values: T[]) {\n    if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n  /** Model that dispatched the event. */\n  source: SelectionModel<T>;\n  /** Options that were added to the model. */\n  added: T[];\n  /** Options that were removed from the model. */\n  removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nexport function getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SelectionModel} from './selection-model';\n\n\n/**\n * Interface for a class that can flatten hierarchical structured data and re-expand the flattened\n * data back into its original structure. Should be used in conjunction with the cdk-tree.\n */\nexport interface TreeDataNodeFlattener<T> {\n  /** Transforms a set of hierarchical structured data into a flattened data array. */\n  flattenNodes(structuredData: any[]): T[];\n\n  /**\n   * Expands a flattened array of data into its hierarchical form using the provided expansion\n   * model.\n   */\n  expandFlattenedNodes(nodes: T[], expansionModel: SelectionModel<T>): T[];\n\n  /**\n   * Put node descendants of node in array.\n   * If `onlyExpandable` is true, then only process expandable descendants.\n   */\n  nodeDescendents(node: T, nodes: T[], onlyExpandable: boolean): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  InjectionToken,\n  IterableChangeRecord,\n  IterableChanges,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\n\n/**\n * The context for an embedded view in the repeater's view container.\n *\n * @template T The type for the embedded view's $implicit property.\n */\nexport interface _ViewRepeaterItemContext<T> {\n  $implicit?: T;\n}\n\n/**\n * The arguments needed to construct an embedded view for an item in a view\n * container.\n *\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeaterItemInsertArgs<C> {\n  templateRef: TemplateRef<C>;\n  context?: C;\n  index?: number;\n}\n\n/**\n * A factory that derives the embedded view context for an item in a view\n * container.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport type _ViewRepeaterItemContextFactory<T, R, C extends _ViewRepeaterItemContext<T>> =\n    (record: IterableChangeRecord<R>,\n     adjustedPreviousIndex: number | null,\n     currentIndex: number | null) => _ViewRepeaterItemInsertArgs<C>;\n\n/**\n * Extracts the value of an item from an {@link IterableChangeRecord}.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n */\nexport type _ViewRepeaterItemValueResolver<T, R> =\n    (record: IterableChangeRecord<R>) => T;\n\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\nexport const enum _ViewRepeaterOperation {\n  /** The content of an existing view was replaced with another item. */\n  REPLACED,\n  /** A new view was created with `createEmbeddedView`. */\n  INSERTED,\n  /** The position of a view changed, but the content remains the same. */\n  MOVED,\n  /** A view was detached from the view container. */\n  REMOVED,\n}\n\n/**\n * Meta data describing the state of a view after it was updated by a\n * {@link _ViewRepeater}.\n *\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeaterItemChange<R, C> {\n  /** The view's context after it was changed. */\n  context?: C;\n  /** Indicates how the view was changed. */\n  operation: _ViewRepeaterOperation;\n  /** The view's corresponding change record. */\n  record: IterableChangeRecord<R>;\n}\n\n/**\n * Type for a callback to be executed after a view has changed.\n *\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport type _ViewRepeaterItemChanged<R, C> =\n    (change: _ViewRepeaterItemChange<R, C>) => void;\n\n/**\n * Describes a strategy for rendering items in a {@link ViewContainerRef}.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeater<T, R, C extends _ViewRepeaterItemContext<T>> {\n  applyChanges(\n      changes: IterableChanges<R>,\n      viewContainerRef: ViewContainerRef,\n      itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n      itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n      itemViewChanged?: _ViewRepeaterItemChanged<R, C>): void;\n\n  detach(): void;\n}\n\n/**\n * Injection token for {@link _ViewRepeater}.\n *\n * INTERNAL ONLY - not for public consumption.\n * @docs-private\n */\nexport const _VIEW_REPEATER_STRATEGY = new InjectionToken<\n        _ViewRepeater<unknown, unknown, _ViewRepeaterItemContext<unknown>>>('_ViewRepeater');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './array-data-source';\nexport * from './collection-viewer';\nexport * from './data-source';\nexport * from './dispose-view-repeater-strategy';\nexport * from './recycle-view-repeater-strategy';\nexport * from './selection-model';\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n} from './unique-selection-dispatcher';\nexport * from './tree-adapter';\nexport * from './view-repeater';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}