/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
export function getParentFromI18nMutateOpCode(mergedCode) {
    return mergedCode >>> 17 /* SHIFT_PARENT */;
}
export function getRefFromI18nMutateOpCode(mergedCode) {
    return (mergedCode & 131064 /* MASK_REF */) >>> 3 /* SHIFT_REF */;
}
export function getInstructionFromI18nMutateOpCode(mergedCode) {
    return mergedCode & 7 /* MASK_INSTRUCTION */;
}
/**
 * Marks that the next string is an element name.
 *
 * See `I18nMutateOpCodes` documentation.
 */
export const ELEMENT_MARKER = {
    marker: 'element'
};
/**
 * Marks that the next string is comment text.
 *
 * See `I18nMutateOpCodes` documentation.
 */
export const COMMENT_MARKER = {
    marker: 'comment'
};
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
export const unusedValueExportToPlacateAjd = 1;
//# sourceMappingURL=data:application/json;base64,