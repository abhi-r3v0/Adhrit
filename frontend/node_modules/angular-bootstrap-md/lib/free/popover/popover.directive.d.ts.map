{"version":3,"file":"popover.directive.d.ts","sources":["popover.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit, OnDestroy, Renderer2, ElementRef, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';\nimport { PositioningService } from '../utils/positioning/positioning.service';\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\nexport declare class PopoverDirective implements OnInit, OnDestroy {\n    private _positionService;\n    containerClass: string;\n    bodyClass: string;\n    headerClass: string;\n    /**\n     * Content to be displayed as popover.\n     */\n    mdbPopover: string | TemplateRef<any>;\n    /**\n     * Title of a popover.\n     */\n    mdbPopoverHeader: string;\n    popoverTitle: string;\n    /**\n     * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n     */\n    placement: 'top' | 'bottom' | 'left' | 'right';\n    /**\n     * Specifies events that should trigger. Supports a space separated list of\n     * event names.\n     */\n    triggers: string;\n    /**\n     * A selector specifying the element the popover should be appended to.\n     * Currently only supports \"body\".\n     */\n    container: string;\n    /**\n     * Returns whether or not the popover is currently being shown\n     */\n    get isOpen(): boolean;\n    set isOpen(value: boolean);\n    dynamicPosition: boolean;\n    outsideClick: boolean;\n    /**\n     * Emits an event when the popover is shown\n     */\n    onShown: EventEmitter<any>;\n    shown: EventEmitter<any>;\n    /**\n     * Emits an event when the popover is hidden\n     */\n    onHidden: EventEmitter<any>;\n    hidden: EventEmitter<any>;\n    private _popover;\n    constructor(_elementRef: ElementRef, _renderer: Renderer2, _viewContainerRef: ViewContainerRef, _config: PopoverConfig, cis: ComponentLoaderFactory, _positionService: PositioningService);\n    /**\n     * Opens an element’s popover. This is considered a “manual” triggering of\n     * the popover.\n     */\n    show(): void | any;\n    /**\n     * Closes an element’s popover. This is considered a “manual” triggering of\n     * the popover.\n     */\n    hide(): void;\n    /**\n     * Toggles an element’s popover. This is considered a “manual” triggering of\n     * the popover.\n     */\n    toggle(): void;\n    onclick(event: any): void;\n    onblur(): void;\n    onTouchStart(event: any): void;\n    ngOnInit(): any;\n    dispose(): void;\n    ngOnDestroy(): any;\n}\n"]}