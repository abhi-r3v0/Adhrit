{"version":3,"file":"positioning.service.d.ts","sources":["positioning.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, RendererFactory2, NgZone } from '@angular/core';\nimport { Options } from './models/index';\nexport interface PositioningOptions {\n    /** The DOM element, ElementRef, or a selector string of an element which will be moved */\n    element?: any;\n    /** The DOM element, ElementRef, or a selector string of an element which the element will be attached to  */\n    target?: any;\n    /**\n     * A string of the form 'vert-attachment horiz-attachment' or 'placement'\n     * - placement can be \"top\", \"bottom\", \"left\", \"right\"\n     * not yet supported:\n     * - vert-attachment can be any of 'top', 'middle', 'bottom'\n     * - horiz-attachment can be any of 'left', 'center', 'right'\n     */\n    attachment?: any;\n    /** A string similar to `attachment`. The one difference is that, if it's not provided,\n     * `targetAttachment` will assume the mirror image of `attachment`.\n     */\n    targetAttachment?: string;\n    /** A string of the form 'vert-offset horiz-offset'\n     * - vert-offset and horiz-offset can be of the form \"20px\" or \"55%\"\n     */\n    offset?: string;\n    /** A string similar to `offset`, but referring to the offset of the target */\n    targetOffset?: string;\n    /** If true component will be attached to body */\n    appendToBody?: boolean;\n}\nexport declare class PositioningService {\n    private _ngZone;\n    options: Options;\n    private update$$;\n    private positionElements;\n    constructor(rendererFactory: RendererFactory2, platformId: number, _ngZone: NgZone);\n    position(options: PositioningOptions): void;\n    addPositionElement(options: PositioningOptions): void;\n    calcPosition(): void;\n    deletePositionElement(elRef: ElementRef): void;\n    setOptions(options: Options): void;\n}\n"]}