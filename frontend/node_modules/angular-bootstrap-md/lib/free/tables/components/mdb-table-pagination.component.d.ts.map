{"version":3,"file":"mdb-table-pagination.component.d.ts","sources":["mdb-table-pagination.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, EventEmitter, ChangeDetectorRef, OnChanges, SimpleChanges, AfterViewInit, OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { MdbTableDirective } from '../directives/mdb-table.directive';\nexport interface MdbPaginationIndex {\n    first: number;\n    last: number;\n}\nexport declare class MdbTablePaginationComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n    private cdRef;\n    tableEl: MdbTableDirective;\n    searchPagination: boolean;\n    searchDataSource: any;\n    ofKeyword: string;\n    dashKeyword: string;\n    paginationAlign: string;\n    hideDescription: boolean;\n    private _destroy$;\n    maxVisibleItems: number;\n    firstItemIndex: number;\n    lastItemIndex: number;\n    lastVisibleItemIndex: number;\n    activePageNumber: number;\n    allItemsLength: number;\n    nextShouldBeDisabled: boolean;\n    previousShouldBeDisabled: boolean;\n    searchText: string;\n    pagination: Subject<MdbPaginationIndex>;\n    nextPageClick: EventEmitter<MdbPaginationIndex>;\n    previousPageClick: EventEmitter<MdbPaginationIndex>;\n    firstPageClick: EventEmitter<MdbPaginationIndex>;\n    lastPageClick: EventEmitter<MdbPaginationIndex>;\n    constructor(cdRef: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    setMaxVisibleItemsNumberTo(value: number): void;\n    searchTextObs(): Observable<any>;\n    disableNextButton(data: any): void;\n    calculateFirstItemIndex(): void;\n    calculateLastItemIndex(): void;\n    paginationChange(): Observable<any>;\n    calculateHowManyPagesShouldBe(): number;\n    previousPage(): void;\n    nextPage(): void;\n    firstPage(): void;\n    lastPage(): void;\n    nextPageObservable(): Observable<any>;\n    previousPageObservable(): Observable<any>;\n    checkIfNextShouldBeDisabled(): boolean;\n    checkIfPreviousShouldBeDisabled(): boolean;\n    ngOnDestroy(): void;\n}\n"]}