{"version":3,"file":"tooltip.directive.d.ts","sources":["tooltip.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { TooltipConfig } from './tooltip.service';\nimport { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';\nimport { PositioningService } from '../utils/positioning/positioning.service';\nexport declare class TooltipDirective implements OnInit, OnDestroy, OnChanges {\n    private _elementRef;\n    private _positionService;\n    private platformId;\n    /**\n     * Content to be displayed as tooltip.\n     */\n    mdbTooltip: string | TemplateRef<any>;\n    /** Fired when tooltip content changes */\n    tooltipChange: EventEmitter<string | TemplateRef<any>>;\n    /**\n     * Placement of a tooltip. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n     */\n    placement: string;\n    /**\n     * Specifies events that should trigger. Supports a space separated list of\n     * event names.\n     */\n    triggers: string;\n    /**\n     * A selector specifying the element the tooltip should be appended to.\n     * Currently only supports \"body\".\n     */\n    container: string;\n    /**\n     * Returns whether or not the tooltip is currently being shown\n     */\n    get isOpen(): boolean;\n    set isOpen(value: boolean);\n    /**\n     * Allows to disable tooltip\n     */\n    isDisabled: boolean;\n    dynamicPosition: boolean;\n    /**\n     * Emits an event when the tooltip is shown\n     */\n    onShown: EventEmitter<any>;\n    shown: EventEmitter<any>;\n    /**\n     * Emits an event when the tooltip is hidden\n     */\n    onHidden: EventEmitter<any>;\n    hidden: EventEmitter<any>;\n    delay: number;\n    customHeight: string;\n    fadeDuration: number;\n    private _destroy$;\n    protected _delayTimeoutId: any;\n    private _tooltip;\n    isBrowser: any;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef, _positionService: PositioningService, _viewContainerRef: ViewContainerRef, cis: ComponentLoaderFactory, config: TooltipConfig, platformId: string);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Toggles an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     */\n    toggle(): void;\n    /**\n     * Opens an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     */\n    show(): void;\n    private showTooltip;\n    /**\n     * Closes an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     */\n    hide(): void;\n    dispose(): void;\n    ngOnDestroy(): void;\n}\n"]}