import { __decorate, __metadata } from "tslib";
import { AfterViewInit, Component, ElementRef, HostBinding, Input, OnInit, Renderer2, ViewEncapsulation, } from '@angular/core';
import { Observable, Subject } from 'rxjs';
let MdbTableDirective = 
// tslint:disable-next-line:component-class-suffix
class MdbTableDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.stickyHeader = false;
        this.stickyHeaderBgColor = '#f2f2f2';
        this.stickyHeaderTextColor = '#000000';
        this.stickyFooter = false;
        this.stickyFooterBgColor = '#f2f2f2';
        this.stickyFooterTextColor = '#000000';
        this._dataSource = [];
        this._dataSourceChanged = new Subject();
    }
    addRow(newRow) {
        this.getDataSource().push(newRow);
    }
    addRowAfter(index, row) {
        this.getDataSource().splice(index, 0, row);
    }
    removeRow(index) {
        this.getDataSource().splice(index, 1);
    }
    rowRemoved() {
        return new Observable((observer) => {
            observer.next(true);
        });
    }
    removeLastRow() {
        this.getDataSource().pop();
    }
    getDataSource() {
        return this._dataSource;
    }
    setDataSource(data) {
        this._dataSource = data;
        this._dataSourceChanged.next(this.getDataSource());
    }
    dataSourceChange() {
        return this._dataSourceChanged;
    }
    filterLocalDataBy(searchKey) {
        return this.getDataSource().filter((obj) => {
            return Object.keys(obj).some((key) => {
                if (obj[key]) {
                    // Fix(tableSearch): table search will now able to filter through nested data
                    return JSON.stringify(obj)
                        .toLowerCase()
                        .includes(searchKey);
                }
            });
        });
    }
    filterLocalDataByFields(searchKey, keys) {
        return this.getDataSource().filter((obj) => {
            return Object.keys(obj).some((key) => {
                if (obj[key]) {
                    if (keys.includes(key)) {
                        if (obj[key].toLowerCase().includes(searchKey)) {
                            return obj[key];
                        }
                    }
                }
            });
        });
    }
    filterLocalDataByMultipleFields(searchKey, keys) {
        const items = searchKey.split(' ').map((x) => x.toLowerCase());
        return this.getDataSource().filter((x) => {
            for (const item of items) {
                let flag = false;
                if (keys !== undefined) {
                    for (const prop in x) {
                        if (x[prop] && x.hasOwnProperty(prop)) {
                            if (keys.includes(prop)) {
                                if (x[prop].toLowerCase().indexOf(item) !== -1) {
                                    flag = true;
                                    break;
                                }
                            }
                        }
                    }
                }
                if (keys === undefined) {
                    for (const prop in x) {
                        if (x.hasOwnProperty(prop) && x[prop].toLowerCase().indexOf(item) !== -1) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (!flag) {
                    return false;
                }
            }
            return true;
        });
    }
    searchLocalDataBy(searchKey) {
        if (!searchKey) {
            return this.getDataSource();
        }
        if (searchKey) {
            return this.filterLocalDataBy(searchKey.toLowerCase());
        }
    }
    searchLocalDataByFields(searchKey, keys) {
        if (!searchKey) {
            return this.getDataSource();
        }
        if (searchKey && keys.length > 0) {
            return this.filterLocalDataByFields(searchKey.toLowerCase(), keys);
        }
        if (!keys || keys.length === 0) {
            return this.filterLocalDataBy(searchKey.toLowerCase());
        }
    }
    searchLocalDataByMultipleFields(searchKey, keys) {
        if (!searchKey) {
            return this.getDataSource();
        }
        if (searchKey && keys !== undefined) {
            return this.filterLocalDataByMultipleFields(searchKey.toLowerCase(), keys);
        }
    }
    searchDataObservable(searchKey) {
        return new Observable((observer) => {
            observer.next(this.searchLocalDataBy(searchKey));
        });
    }
    ngOnInit() {
        this.renderer.addClass(this.el.nativeElement, 'table');
    }
    ngAfterViewInit() {
        // Fix(stickyHeader): resolved problem with not working stickyHeader="true" on Chrome
        if (this.stickyHeader) {
            this.makeSticky('thead', 'sticky-top', this.stickyHeaderBgColor, this.stickyHeaderTextColor);
        }
        if (this.stickyFooter) {
            this.makeSticky('tfoot', 'sticky-bottom', this.stickyFooterBgColor, this.stickyFooterTextColor);
        }
    }
    makeSticky(query, elementClass, bgColor, color) {
        const tableHead = this.el.nativeElement.querySelector(query);
        Array.from(tableHead.firstElementChild.children).forEach((child) => {
            this.renderer.addClass(child, elementClass);
            if (bgColor) {
                this.renderer.setStyle(child, 'background-color', bgColor);
            }
            if (color) {
                this.renderer.setStyle(child, 'color', color);
            }
        });
    }
};
MdbTableDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    HostBinding('class.table-striped'),
    __metadata("design:type", Boolean)
], MdbTableDirective.prototype, "striped", void 0);
__decorate([
    Input(),
    HostBinding('class.table-bordered'),
    __metadata("design:type", Boolean)
], MdbTableDirective.prototype, "bordered", void 0);
__decorate([
    Input(),
    HostBinding('class.table-borderless'),
    __metadata("design:type", Boolean)
], MdbTableDirective.prototype, "borderless", void 0);
__decorate([
    Input(),
    HostBinding('class.table-hover'),
    __metadata("design:type", Boolean)
], MdbTableDirective.prototype, "hover", void 0);
__decorate([
    Input(),
    HostBinding('class.table-sm'),
    __metadata("design:type", Boolean)
], MdbTableDirective.prototype, "small", void 0);
__decorate([
    Input(),
    HostBinding('class.table-responsive'),
    __metadata("design:type", Boolean)
], MdbTableDirective.prototype, "responsive", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbTableDirective.prototype, "stickyHeader", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbTableDirective.prototype, "stickyHeaderBgColor", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbTableDirective.prototype, "stickyHeaderTextColor", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbTableDirective.prototype, "stickyFooter", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbTableDirective.prototype, "stickyFooterBgColor", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbTableDirective.prototype, "stickyFooterTextColor", void 0);
MdbTableDirective = __decorate([
    Component({
        // tslint:disable-next-line:component-selector
        selector: '[mdbTable]',
        exportAs: 'mdbTable',
        template: '<ng-content></ng-content>',
        encapsulation: ViewEncapsulation.None,
        styles: ["table th{font-size:.9rem;font-weight:400}table td{font-size:.9rem;font-weight:300}table thead td svg.ascending,table thead td svg.descending,table thead th svg.ascending,table thead th svg.descending{display:none;max-height:.9rem;max-width:.9rem}table thead td[aria-sort=ascending] svg.ascending,table thead td[aria-sort=descending] svg.descending,table thead th[aria-sort=ascending] svg.ascending,table thead th[aria-sort=descending] svg.descending{display:unset}table thead td:not([aria-sort]):hover svg.descending,table thead td[aria-sort=constant]:hover svg.descending,table thead th:not([aria-sort]):hover svg.descending,table thead th[aria-sort=constant]:hover svg.descending{display:unset;opacity:.5}table tfoot .sticky-bottom{position:-webkit-sticky;position:sticky;bottom:0}table.table{margin-bottom:0}table.table thead th{border-top:none;border-bottom-width:1px}table.table td,table.table th{padding:1.1rem 16px 1rem}table.table .label-table{margin:0;padding:0;line-height:.94rem;height:.94rem}table.table.btn-table td{vertical-align:middle}table.table-hover tbody tr:hover{transition:.5s;background-color:rgba(0,0,0,.075)}table .th-lg{min-width:9rem}table .th-sm{min-width:6rem}table.table-sm td,table.table-sm th{padding-top:.6rem;padding-bottom:.6rem}.table-scroll-vertical{max-height:300px;overflow-y:auto}.table-fixed{table-layout:fixed}.table-responsive-lg>.table-bordered,.table-responsive-md>.table-bordered,.table-responsive-sm>.table-bordered,.table-responsive-xl>.table-bordered,.table-responsive>.table-bordered{border-top:1px solid #dee2e6}"]
    })
    // tslint:disable-next-line:component-class-suffix
    ,
    __metadata("design:paramtypes", [ElementRef, Renderer2])
], MdbTableDirective);
export { MdbTableDirective };
//# sourceMappingURL=data:application/json;base64,